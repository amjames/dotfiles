#! /usr/bin/env python 

import sys 
import os 
import subprocess 
import re

#need to update this list as needed 
hosts = {
        'brlogin1':'blueridge',
        'brlogin2':'blueridge',
        'br':'blueridge',
        'Herbert-3.local':'herbert'
        }


# I hate forgetting to put these in '' 
mv = 'mv'
rm = 'rm'
cp = 'cp'
ls = 'ls'
cd = 'cd'



rc_repo_path = os.path.expanduser('~/Vault/dotfiles')



home = os.path.expanduser('~')

def hostname():
    brcompute = re.compile('^(br)[0-9]{1,3}$')
    a = subprocess.check_output(['hostname'])
    name = a.strip()
    if name in hosts.keys():
        return hosts[name]
    else:
        host = brcompute.search(name)
        return hosts[host.group(1)]



def bakup(path,test=False):
    if test:
        string = " ".join([cp, rc_repo, 'somthing else'])
        print string
    else:
        subprocess.call([cp, path, path+'.bak'])


def delbakup(path,test=False):
    if test:
        string = ' '.join([rm, path+'.bak'])
        print string
    else:
        subprocess.call([rm, path+'.bak'])

def isnewer(path1,path2):
    n1 = os.path.getmtime(path1)
    n2 = os.path.getmtime(path2)
    if n2>n1:
        return path2
    else:
        return path1
def report():
    print 'in ' + os.path.abspath('.')

def update_repo():
    report()
    workingdir = os.path.abspath('.')
    os.chdir(rc_repo_path)
    subprocess.check_call(['git','pull','origin','master'])
    os.chdir(home)
    report()

def unlock_rc(rcname):
    subprocess.call(
            ['chmod','644',os.path.join(home,rcname)]
            )
    return 
def lock_rc(rcname):
    subprocess.call(
            ['chmod','444',os.path.join(home,rcname)]
            )
    return 


def main(argv=None):
    update_repo()
    target_re_string = '^.*(?P<rc>\.[a-z]+rc)(?P<tag>(\.({hosts}))?)'
    #mental note Python is pretty rad
    target = re.compile(target_re_string.format(hosts='|'.join(hosts.values())))
    hometarget = re.compile('(?P<rc>^\.[a-z]+rc)$')
    
    a = subprocess.check_output([ls, rc_repo_path ])
    contents= a.strip().split()
    rc_repo = {}
    for each in contents:
        found  = target.match(each)
        if found:
            # add the first .rc files of a type that is found to the dict
            if found.group('rc') in rc_repo.keys():
                if found.group('tag') == hostname():
                    #if a seccond is found only keep the one with the hostname
                    # as a tag
                    rc_repo[found.group('rc')]=os.path.join(rc_repo_path,
                            found.group(0))
                else:
                    pass
            else:
                #make sure you add one if there is nothing there 
                rc_repo[found.group('rc')] = os.path.join(rc_repo_path,
                        found.group(0))
    a = subprocess.check_output([ls,'-a',home])
    contents = a.strip().split()
    for each in contents:
        found = hometarget.match(each)
        if found:
            if found.group('rc') in rc_repo.keys():
                unlock_rc(found.group('rc'))
                workon =os.path.join(home,found.group(0))
                bakup(workon)
                subprocess.call([
                    cp,
                    isnewer(workon,rc_repo[found.group('rc')]),
                    workon])
                delbakup(workon)
                lock_rc(found.group('rc'))

def test():
    print hostname()
    target_re_string = '^.*(?P<rc>\.[a-z]+rc)(?P<tag>(\.({hosts}))?)'
    print "re.compile("+ target_re_string.format(hosts='|'.join(hosts.values()))
if __name__ == '__main__':
    main(sys.argv[2:])
    #test()






