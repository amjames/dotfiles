#! /usr/bin/env python 

import sys 
import os 
import subprocess 
import re
mv = 'mv'
rm = 'rm'
cp = 'cp'
ls = 'ls'
cd = 'cd'
rc_gist_repo = os.path.expanduser('~/gist/myrcfiles')
home = os.path.expanduser('~')
def bakup(path,test=False):
    if test:
        string = " ".join([cp, rc_gist_repo, 'somthing else'])
        print string
    else:
        subprocess.call([cp, path, path+'.bak'])


def delbakup(path,test=False):
    if test:
        string = ' '.join([rm, path+'.bak'])
        print string
    else:
        subprocess.call([rm, path+'.bak'])

def isnewer(path1,path2):
    n1 = os.path.getmtime(path1)
    n2 = os.path.getmtime(path2)
    if n2>n1:
        return path2
    else:
        return path1
def report():
    print 'in ' + os.path.abspath('.')
def update_repo():
    report()
    workingdir = os.path.abspath('.')
    os.chdir(rc_gist_repo)
    report()
    subprocess.check_call(['git','pull','origin','master'])
    report()    
    os.chdir(workingdir)
    report()



def main(argv=None):
    update_repo()    
    target = re.compile('^.*(?P<rc>\.[a-z]+rc)(?P<tag>(\.herbert)?)')
    hometarget = re.compile('(?P<rc>^\.[a-z]+rc)$')
    
    a = subprocess.check_output([ls,rc_gist_repo])
    contents= a.strip().split()
    rc_repo = {}
    for each in contents:
        found  = target.match(each)
        if found:
            #if the .herbert one exisits ignore the others 
            if found.group('rc') in rc_repo.keys():
                if found.group('tag') == '':
                    pass
                else:
                    rc_repo[found.group('rc')]=os.path.join(rc_gist_repo,
                            found.group(0))
            else:
                rc_repo[found.group('rc')] = os.path.join(rc_gist_repo,
                        found.group(0))
    a = subprocess.check_output([ls,'-a',home])
    contents = a.strip().split()
    for each in contents:
        found = hometarget.match(each)
        if found:
            if found.group('rc') in rc_repo.keys():
                workon =os.path.join(home,found.group(0))
                bakup(workon)
                subprocess.call([cp,
                    isnewer(workon,rc_repo[found.group('rc')]),workon])
                delbakup(workon)





    

if __name__ == '__main__':
    main(sys.argv[1:])






