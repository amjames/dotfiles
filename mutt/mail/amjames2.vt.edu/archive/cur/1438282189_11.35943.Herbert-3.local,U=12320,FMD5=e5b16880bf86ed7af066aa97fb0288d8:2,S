Delivered-To: amjames2@vt.edu
Received: by 10.140.25.151 with SMTP id 23csp1223775qgt;
        Sun, 26 Jul 2015 19:23:54 -0700 (PDT)
X-Received: by 10.55.26.167 with SMTP id l39mr36542990qkh.14.1437963834073;
        Sun, 26 Jul 2015 19:23:54 -0700 (PDT)
Return-Path: <andy.simmonett@gmail.com>
Received: from mr2.cc.vt.edu (mr2.cc.ipv6.vt.edu. [2001:468:c80:2105:0:212:7ed0:359e])
        by mx.google.com with ESMTPS id n8si19263582qhb.106.2015.07.26.19.23.53
        (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sun, 26 Jul 2015 19:23:54 -0700 (PDT)
Received-SPF: softfail (google.com: domain of transitioning andy.simmonett@gmail.com does not designate 192.92.207.222 as permitted sender) client-ip=192.92.207.222;
Authentication-Results: mx.google.com;
       spf=softfail (google.com: domain of transitioning andy.simmonett@gmail.com does not designate 192.92.207.222 as permitted sender) smtp.mail=andy.simmonett@gmail.com;
       dkim=pass header.i=@gmail.com
Received: from mail-pa0-x22d.google.com (mail-pa0-x22d.google.com [IPv6:2607:f8b0:400e:c03::22d])
	by mr2.cc.vt.edu (8.14.4/8.14.4) with ESMTP id t6R2Nlwv019595;
	Sun, 26 Jul 2015 22:23:52 -0400
Received: by pabkd10 with SMTP id kd10so43090782pab.2;
        Sun, 26 Jul 2015 19:23:46 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=content-type:mime-version:subject:from:in-reply-to:date:cc
         :message-id:references:to;
        bh=BTkuFSt0f5wB76ZF/m4rLE3kGz32z95kqBzIpy/h4nE=;
        b=EkrVJl0fI0tiUEKsxK6F62rXj/F68mQn7CkPYTK0c5H7YDTwHvJr7e19LZt+Q8U94w
         vIHRIF+ayF7Ngd1lbQch1ksQfljlKxOxqdJknPcHTtPgOa5ivZVdYhBh31k8BsIFfBqk
         C5AYWGcCfz1o8BDPXufmnpjmRYL+RwIQgVsUTojQmFc0QuoP8f3r+8ytalyPV0c7BMFi
         SmNbw3osStAnt5TXaEMpIuDsjIrveEVOUknGk1FKDYTWplBrzlZQER9zwX/pO1QVodDR
         AcrCTUVu9u9vMmHdSaI33UFYETd69SgElojpOuvmiTkhWp3JD+ZxdYVN2QYJdygSHOGr
         spIw==
X-Received: by 10.66.156.68 with SMTP id wc4mr62852074pab.126.1437963826746;
        Sun, 26 Jul 2015 19:23:46 -0700 (PDT)
Received: from [10.0.1.6] ([192.92.207.222])
        by smtp.gmail.com with ESMTPSA id fl3sm26222036pdb.30.2015.07.26.19.23.45
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Sun, 26 Jul 2015 19:23:45 -0700 (PDT)
Content-Type: multipart/alternative; boundary="Apple-Mail=_A0E61775-87B8-4030-8AB8-B1767C352BEB"
Mime-Version: 1.0 (Mac OS X Mail 8.2 \(2102\))
Subject: Re: Insane segfault
From: Andrew Simmonett <andy.simmonett@gmail.com>
In-Reply-To: <CAH0V_1YzGBYzOjdKDczJD3W2zTavpb4rC3Q_m6CpbaG=5a1U7Q@mail.gmail.com>
Date: Sun, 26 Jul 2015 20:23:44 -0600
Cc: Justin Turney <justin.turney@gmail.com>,
        David Sherrill <sherrill@gatech.edu>,
        Lori Burns <lori.burns@gmail.com>,
        Roberto Di Remigio <roberto.diremigio@gmail.com>,
        Ashutosh Kumar <akumar1@vt.edu>, Andrew James <amjames2@vt.edu>
Message-Id: <8FFD5FB5-5C60-46E7-9CE2-1548A06A9789@gmail.com>
References: <CAH0V_1Zbej=6ZAM3N_LJfr_cB047y3k=+QLuK8mxM=+rCiPAdw@mail.gmail.com> <22527015-70FA-4E7E-94C5-7FB6A5AD6F7E@gmail.com> <CAH0V_1bP3uy64m1rLZWKec8=k+5sD-yS8MyPpP7nw0PtL_2DuA@mail.gmail.com> <6A1F4E6D-CA9D-4F2B-8C3C-F76C4738D18C@gmail.com> <CAH0V_1bUvzC38iGRGeFJsh2=XEUzSPya5Nxb3DuK7XgiXKsD5Q@mail.gmail.com> <6CC01FBA-6330-40AA-A551-F20D687A2FA0@gmail.com> <CAH0V_1agfSjFK5gzUr=Uo7eW6ZCYZ=H4=UF3GhPLcdJ7QCf-Qg@mail.gmail.com> <CAH0V_1YzGBYzOjdKDczJD3W2zTavpb4rC3Q_m6CpbaG=5a1U7Q@mail.gmail.com>
To: "T. Daniel Crawford" <crawdad@vt.edu>
X-Mailer: Apple Mail (2.2102)
X-Spam-Status: No, score=-0.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
	DKIM_VALID_AU,FREEMAIL_FROM,HTML_MESSAGE autolearn=disabled version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mr2.cc.vt.edu
X-Gm-Spam: 0
X-Gm-Phishy: 0
X-Gm-Spam: 0
X-Gm-Phishy: 0


--Apple-Mail=_A0E61775-87B8-4030-8AB8-B1767C352BEB
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=utf-8

Daniel,

This extra information is very useful.  I think it=E2=80=99s probably a =
clash of file names; there appears to be a hamiltonian.h file in libfock =
as well as chemps2.  I bet the problem is related to the wrong version =
of the header file being included.

Andy.


> On Jul 26, 2015, at 8:18 PM, T. Daniel Crawford <crawdad@vt.edu> =
wrote:
>=20
> Hi, all,
>=20
> Andy and I have been having a discussion about segfaults I've =
encountered when trying to execute PSI4 plugins on my Intel-based =
clusters.  We've seen some strange behavior with objects from =
essentially empty classes causing the code to crash when the plugin =
exits. (You can see our back and forth below, if you're interested.  =
These problems do not occur on my Macs.) =20
>=20
> Well, I'm expanding the conversation to include all of you because my =
observations have gotten weirder. On two different computing systems =
using Intel compilers (14.0.3 and 15.3), I get a segfault for a blank =
plugin (called, appropriately, "junk") for which I add a trivial =
Hamiltonian class, defined as follows:
>=20
> hamiltonian.h:
>=20
> namespace psi {
> class Hamiltonian {
> public:
>   Hamiltonian();
>   ~Hamiltonian();
> };
> }
>=20
> hamiltonian.cc:
>=20
> #include "hamiltonian.h"
> namespace psi {
> Hamiltonian::Hamiltonian() { }
> Hamiltonian::~Hamiltonian() { }
> }
>=20
> In junk.cc, the *only* changes from the default created by "psi4 =
--new-plugin" are:
>=20
> #include "hamiltonian.h"
>=20
> INIT_PLUGIN
>=20
> and
>=20
>     Hamiltonian A;
>=20
>     return Success;
>=20
> HOWEVER, if I instead do EXACTLY the same thing, but every instance of =
the word "Hamiltonian" is replaced by "myclass" and I create myclass.h =
and myclass.cc defined similarly as above, psi4 does not segfault.  This =
is bizarre.
>=20
> Another observation: if I get rid of hamiltonian.cc and define the =
constructor and destructor inside hamiltonian.h as:
>=20
> namespace psi {
> class Hamiltonian {
> public:
>   Hamiltonian() {};
>   ~Hamiltonian() {};
> };
> }
>=20
> the code runs without complaint.  I cannot yet explain this behavior.  =
Maybe you can see a straightforward answer.
>=20
> Best regards,
>=20
> -Daniel
> --
> Prof. T. Daniel Crawford
> crawdad@vt.edu <mailto:crawdad@vt.edu>
> On Sat, Jul 25, 2015 at 9:10 PM, T. Daniel Crawford <crawdad@vt.edu =
<mailto:crawdad@vt.edu>> wrote:
> OK, so if I understand the website to which you referred (which I =
love, by the way),
>=20
> Hamiltonian H();
>=20
> means H is a function that returns a Hamiltonian object, so the reason =
the code didn't produce a segfault is because I declared a function I =
never called, so a definition was unnecessary.  Would you agree?
>=20
> And to follow up, indeed the call
>=20
> Hamiltonian *H =3D new Hamiltonian();
>=20
> succeeds, but adding
>=20
> delete H;
>=20
> causes the segfault.  Fascinating.  So the problem is not with =
boost::shared_ptr.  FYI, ripping everything out of the plugin structure =
and simply building it into a main() runs just fine.
>=20
> -Daniel
>=20
> --
> Prof. T. Daniel Crawford
> crawdad@vt.edu <mailto:crawdad@vt.edu>
> On Sat, Jul 25, 2015 at 2:29 AM, Andrew Simmonett =
<andy.simmonett@gmail.com <mailto:andy.simmonett@gmail.com>> wrote:
> Daniel,
>=20
> H(); succeeds because it=E2=80=99s not actually initializing anything, =
per point b) of this:
>=20
> http://herbsutter.com/2013/05/09/gotw-1-solution/ =
<http://herbsutter.com/2013/05/09/gotw-1-solution/>
>=20
> The only reason I remember that is because it cost me a few days of my =
life when debugging a problem a few years ago.  It=E2=80=99s obviously =
not the destruction of the shared ptr if =E2=80=9CHamiltonian H;=E2=80=9D =
causes issues.  The next question is whether the creation or the =
destruction of the object is to blame.  What about creating an object
>=20
> 	Hamiltonian *H =3D new Hamiltonian();
>=20
> but not destroying it?  I suspect that will run, because I think =
tearing down the object is causing issues.  If it does run successfully, =
does adding
>=20
> 	delete H;
>=20
> break the code?  I=E2=80=99m really baffled by this bug, and am =
interested to find the cause.
>=20
> Andy.
>=20
>> On Jul 24, 2015, at 10:04 PM, T. Daniel Crawford <crawdad@vt.edu =
<mailto:crawdad@vt.edu>> wrote:
>>=20
>> Interesting.  This succeeds:
>>=20
>>   Hamiltonian H();
>>=20
>> But this fails:
>>=20
>>   boost::shared_ptr<Hamiltonian> H(new Hamiltonian());
>>=20
>> As does this:
>>=20
>>   Hamiltonian H;
>>=20
>> I do not yet know why.
>>=20
>> -TDC
>>=20
>> --
>> Prof. T. Daniel Crawford
>> crawdad@vt.edu <mailto:crawdad@vt.edu>
>> On Fri, Jul 24, 2015 at 4:47 PM, Andrew Simmonett =
<andy.simmonett@gmail.com <mailto:andy.simmonett@gmail.com>> wrote:
>> Daniel,
>>=20
>> Sorry, I was on a conference call with Jay Ponder.  What happens if =
you remove the shared pointer, and instantiate the object without using =
=E2=80=9Cnew=E2=80=9D?
>>=20
>>=20
>>> On Jul 24, 2015, at 1:39 PM, T. Daniel Crawford <crawdad@vt.edu =
<mailto:crawdad@vt.edu>> wrote:
>>>=20
>>> I still get a segfault on exit.  I should also note that, when I add =
other calls instead of the Hamiltonian instantiation, I see no problems, =
e.g.:
>>>=20
>>>   boost::shared_ptr<Wavefunction> ref =3D =
Process::environment.wavefunction();
>>>=20
>>> What could be special about that Hamiltonian class?
>>>=20
>>> --
>>> Prof. T. Daniel Crawford
>>> crawdad@vt.edu <mailto:crawdad@vt.edu>
>>> On Fri, Jul 24, 2015 at 3:35 PM, Andrew Simmonett =
<andy.simmonett@gmail.com <mailto:andy.simmonett@gmail.com>> wrote:
>>> Daniel,
>>>=20
>>> I wonder if the cleanup of the plugin happens too late.  That is, =
perhaps the boost::shared_ptr reaches a count of zero after the return =
statement but, for some strange reason, the plugin code has already been =
unloaded. Then it=E2=80=99d be trying to call d=E2=80=99tor code that is =
no longer around.  The way to test this is to leave the code that =
creates the instance intact but call H.reset() immediately before the =
return statement.  I seriously doubt that=E2=80=99s the cause, but =
it=E2=80=99s worth eliminating.
>>>=20
>>> Andy.
>>>=20
>>>=20
>>>> On Jul 24, 2015, at 1:28 PM, T. Daniel Crawford <crawdad@vt.edu =
<mailto:crawdad@vt.edu>> wrote:
>>>>=20
>>>> I'm going insane.  I have a useful plugin that I'd like to execute =
on a better computing cluster (CentOS, Intel/15.3, MKL/11.2.3, etc.), =
but I get a segfault at the plugin's exit that I can't track.  =
Interactive debuggers aren't functioning on the system for some reason, =
so I started ripping out pieces of the code to narrow the problem down.  =
I determined that the error occurs because of a constructor I've =
created, but even when I rip the class down to absolutely nothing, the =
segfault remains.  Seriously, here's the code in its entirety:
>>>>=20
>>>> ugamp.cc <http://ugamp.cc/>:
>>>>=20
>>>> #include "hamiltonian.h"
>>>>=20
>>>> #include <libplugin/plugin.h>
>>>> #include <psi4-dec.h>
>>>> #include <liboptions/liboptions.h>
>>>>=20
>>>> INIT_PLUGIN
>>>>=20
>>>> using namespace boost;
>>>>=20
>>>> namespace psi { namespace ugamp {
>>>>=20
>>>> extern "C"
>>>> int read_options(std::string name, Options& options)
>>>> {
>>>>   if(name =3D=3D "UGAMP" || options.read_globals()) {
>>>>     options.add_int("PRINT", 1);
>>>>     options.add_str("REFERENCE", "RHF");
>>>>     options.add_str("WFN", "CCSD", "MP2 MP3 MP4 CCSD CCSD_T");
>>>>   }
>>>>=20
>>>>   return true;
>>>> }
>>>>=20
>>>> extern "C"
>>>> PsiReturnType ugamp(Options& options)
>>>> {
>>>>   boost::shared_ptr<Hamiltonian> H(new Hamiltonian());
>>>>=20
>>>>   return Success;
>>>> }
>>>>=20
>>>> }} // End namespaces
>>>>=20
>>>>=20
>>>> hamiltonian.h:
>>>>=20
>>>> #ifndef HAMILTONIAN_H
>>>> #define HAMILTONIAN_H
>>>>=20
>>>> namespace psi {
>>>>=20
>>>> class Hamiltonian {
>>>> public:
>>>>   Hamiltonian();
>>>>   ~Hamiltonian();
>>>>=20
>>>> }; // Hamiltonian
>>>>=20
>>>> } // psi
>>>>=20
>>>> #endif // HAMILTONIAN_H
>>>>=20
>>>> hamiltonian.cc <http://hamiltonian.cc/>:
>>>>=20
>>>> #include "hamiltonian.h"
>>>>=20
>>>> namespace psi {
>>>>=20
>>>> Hamiltonian::Hamiltonian()
>>>> {
>>>> }
>>>>=20
>>>> Hamiltonian::~Hamiltonian()
>>>> {
>>>> }
>>>>=20
>>>> } // namespace psi
>>>>=20
>>>> If I comment out the "boost::shared_ptr<Hamiltonian> H(new =
Hamiltonian());" line, psi4 runs with no problems, but if I include it, =
I get a segfault.  There's NOTHING there?  What the hell could be going =
on?
>>>>=20
>>>> -TDC
>>>>=20
>>>> --
>>>> Prof. T. Daniel Crawford
>>>> crawdad@vt.edu <mailto:crawdad@vt.edu>
>>>=20
>>=20
>>=20
>=20
>=20
>=20


--Apple-Mail=_A0E61775-87B8-4030-8AB8-B1767C352BEB
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=utf-8

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html =
charset=3Dutf-8"></head><body style=3D"word-wrap: break-word; =
-webkit-nbsp-mode: space; -webkit-line-break: after-white-space;" =
class=3D"">Daniel,<div class=3D""><br class=3D""></div><div =
class=3D"">This extra information is very useful. &nbsp;I think it=E2=80=99=
s probably a clash of file names; there appears to be a hamiltonian.h =
file in libfock as well as chemps2. &nbsp;I bet the problem is related =
to the wrong version of the header file being included.</div><div =
class=3D""><br class=3D""></div><div class=3D"">Andy.</div><div =
class=3D""><br class=3D""></div><div class=3D""><br =
class=3D""><div><blockquote type=3D"cite" class=3D""><div class=3D"">On =
Jul 26, 2015, at 8:18 PM, T. Daniel Crawford &lt;<a =
href=3D"mailto:crawdad@vt.edu" class=3D"">crawdad@vt.edu</a>&gt; =
wrote:</div><br class=3D"Apple-interchange-newline"><div class=3D""><div =
dir=3D"ltr" class=3D""><div class=3D"">Hi, all,</div><div class=3D""><br =
class=3D""></div><div class=3D"">Andy and I have been having a =
discussion about segfaults I've encountered when trying to execute PSI4 =
plugins on my Intel-based clusters.&nbsp; We've seen some strange =
behavior with objects from essentially empty classes causing the code to =
crash when the plugin exits. (You can see our back and forth below, if =
you're interested.&nbsp; These problems do not occur on my Macs.) =
&nbsp;</div><div class=3D""><br class=3D""></div><div class=3D"">Well, =
I'm expanding the conversation to include all of you because my =
observations have gotten weirder. On two different computing systems =
using Intel compilers (14.0.3 and 15.3), I get a segfault for a blank =
plugin (called, appropriately, "junk") for which I add a trivial =
Hamiltonian class, defined as follows:</div><div class=3D""><br =
class=3D""></div><div class=3D"">hamiltonian.h:</div><div class=3D""><br =
class=3D""></div><div class=3D""><div style=3D"margin: 0px; font-size: =
11px; font-family: Menlo; color: rgb(239, 239, 239); background-color: =
rgb(0, 0, 0);" class=3D"">namespace psi {</div><div style=3D"margin: =
0px; font-size: 11px; font-family: Menlo; color: rgb(239, 239, 239); =
background-color: rgb(0, 0, 0);" class=3D"">class Hamiltonian =
{</div><div style=3D"margin: 0px; font-size: 11px; font-family: Menlo; =
color: rgb(239, 239, 239); background-color: rgb(0, 0, 0);" =
class=3D"">public:</div><div style=3D"margin: 0px; font-size: 11px; =
font-family: Menlo; color: rgb(239, 239, 239); background-color: rgb(0, =
0, 0);" class=3D"">&nbsp; Hamiltonian();</div><div style=3D"margin: 0px; =
font-size: 11px; font-family: Menlo; color: rgb(239, 239, 239); =
background-color: rgb(0, 0, 0);" class=3D"">&nbsp; =
~Hamiltonian();</div><div style=3D"margin: 0px; font-size: 11px; =
font-family: Menlo; color: rgb(239, 239, 239); background-color: rgb(0, =
0, 0);" class=3D"">};</div><div style=3D"margin: 0px; font-size: 11px; =
font-family: Menlo; color: rgb(239, 239, 239); background-color: rgb(0, =
0, 0);" class=3D"">}</div></div><div class=3D""><br class=3D""></div><div =
class=3D""><a href=3D"http://hamiltonian.cc" =
class=3D"">hamiltonian.cc</a>:</div><div class=3D""><br =
class=3D""></div><div class=3D""><div style=3D"margin: 0px; font-size: =
11px; font-family: Menlo; color: rgb(239, 239, 239); background-color: =
rgb(0, 0, 0);" class=3D"">#include "hamiltonian.h"</div><div =
style=3D"margin: 0px; font-size: 11px; font-family: Menlo; color: =
rgb(239, 239, 239); background-color: rgb(0, 0, 0);" class=3D"">namespace =
psi {</div><div style=3D"margin: 0px; font-size: 11px; font-family: =
Menlo; color: rgb(239, 239, 239); background-color: rgb(0, 0, 0);" =
class=3D"">Hamiltonian::Hamiltonian() { }</div><div style=3D"margin: =
0px; font-size: 11px; font-family: Menlo; color: rgb(239, 239, 239); =
background-color: rgb(0, 0, 0);" class=3D"">Hamiltonian::~Hamiltonian() =
{ }</div><div style=3D"margin: 0px; font-size: 11px; font-family: Menlo; =
color: rgb(239, 239, 239); background-color: rgb(0, 0, 0);" =
class=3D"">}</div></div><div class=3D""><br class=3D""></div><div =
class=3D"">In <a href=3D"http://junk.cc" class=3D"">junk.cc</a>, the =
*only* changes from the default created by "psi4 --new-plugin" =
are:</div><div class=3D""><br class=3D""></div><div class=3D""><div =
style=3D"margin: 0px; font-size: 11px; font-family: Menlo; color: =
rgb(239, 239, 239); background-color: rgb(0, 0, 0);" class=3D"">#include =
"hamiltonian.h"</div><div style=3D"margin: 0px; font-size: 11px; =
font-family: Menlo; color: rgb(239, 239, 239); background-color: rgb(0, =
0, 0); min-height: 13px;" class=3D""><br class=3D""></div><div =
style=3D"margin: 0px; font-size: 11px; font-family: Menlo; color: =
rgb(239, 239, 239); background-color: rgb(0, 0, 0);" =
class=3D"">INIT_PLUGIN</div></div><div class=3D""><br =
class=3D""></div><div class=3D"">and</div><div class=3D""><br =
class=3D""></div><div class=3D""><div style=3D"margin: 0px; font-size: =
11px; font-family: Menlo; color: rgb(239, 239, 239); background-color: =
rgb(0, 0, 0);" class=3D"">&nbsp; &nbsp;&nbsp;Hamiltonian A;</div><div =
style=3D"margin: 0px; font-size: 11px; font-family: Menlo; color: =
rgb(239, 239, 239); background-color: rgb(0, 0, 0); min-height: 13px;" =
class=3D""><br class=3D""></div><div style=3D"margin: 0px; font-size: =
11px; font-family: Menlo; color: rgb(239, 239, 239); background-color: =
rgb(0, 0, 0);" class=3D"">&nbsp; &nbsp; return Success;</div></div><div =
class=3D"gmail_extra"><br class=3D""></div><div =
class=3D"gmail_extra">HOWEVER, if I instead do EXACTLY the same thing, =
but every instance of the word "Hamiltonian" is replaced by "myclass" =
and I create myclass.h and <a href=3D"http://myclass.cc" =
class=3D"">myclass.cc</a> defined similarly as above, psi4 does not =
segfault.&nbsp; This is bizarre.</div><div class=3D"gmail_extra"><br =
class=3D""></div><div class=3D"gmail_extra">Another observation: if I =
get rid of <a href=3D"http://hamiltonian.cc" class=3D"">hamiltonian.cc</a>=
 and define the constructor and destructor inside hamiltonian.h =
as:</div><div class=3D"gmail_extra"><br class=3D""></div><div =
class=3D"gmail_extra"><div style=3D"margin: 0px; font-size: 11px; =
font-family: Menlo; color: rgb(239, 239, 239); background-color: rgb(0, =
0, 0);" class=3D"">namespace psi {</div><div style=3D"margin: 0px; =
font-size: 11px; font-family: Menlo; color: rgb(239, 239, 239); =
background-color: rgb(0, 0, 0);" class=3D"">class Hamiltonian =
{</div><div style=3D"margin: 0px; font-size: 11px; font-family: Menlo; =
color: rgb(239, 239, 239); background-color: rgb(0, 0, 0);" =
class=3D"">public:</div><div style=3D"margin: 0px; font-size: 11px; =
font-family: Menlo; color: rgb(239, 239, 239); background-color: rgb(0, =
0, 0);" class=3D"">&nbsp; Hamiltonian() {};</div><div style=3D"margin: =
0px; font-size: 11px; font-family: Menlo; color: rgb(239, 239, 239); =
background-color: rgb(0, 0, 0);" class=3D"">&nbsp; ~Hamiltonian() =
{};</div><div style=3D"margin: 0px; font-size: 11px; font-family: Menlo; =
color: rgb(239, 239, 239); background-color: rgb(0, 0, 0);" =
class=3D"">};</div><div style=3D"margin: 0px; font-size: 11px; =
font-family: Menlo; color: rgb(239, 239, 239); background-color: rgb(0, =
0, 0);" class=3D"">}</div><div class=3D""><br class=3D""></div><div =
class=3D"">the code runs without complaint.&nbsp; I cannot yet explain =
this behavior.&nbsp; Maybe you can see a straightforward =
answer.</div><div class=3D""><br class=3D""></div><div class=3D"">Best =
regards,</div><div class=3D""><br class=3D""></div><div =
class=3D"">-Daniel</div></div><div class=3D"gmail_extra"><div =
class=3D""><div class=3D"gmail_signature"><div dir=3D"ltr" =
class=3D"">--<div class=3D"">Prof. T. Daniel Crawford</div><div =
class=3D""><a href=3D"mailto:crawdad@vt.edu" target=3D"_blank" =
class=3D"">crawdad@vt.edu</a></div></div></div></div>
<br class=3D""><div class=3D"gmail_quote">On Sat, Jul 25, 2015 at 9:10 =
PM, T. Daniel Crawford <span dir=3D"ltr" class=3D"">&lt;<a =
href=3D"mailto:crawdad@vt.edu" target=3D"_blank" =
class=3D"">crawdad@vt.edu</a>&gt;</span> wrote:<br class=3D""><blockquote =
class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc =
solid;padding-left:1ex"><div dir=3D"ltr" class=3D"">OK, so if I =
understand the website to which you referred (which I love, by the =
way),<div class=3D""><br class=3D""></div><div class=3D"">Hamiltonian =
H();</div><div class=3D""><br class=3D""></div><div class=3D"">means H =
is a function that returns a Hamiltonian object, so the reason the code =
didn't produce a segfault is because I declared a function I never =
called, so a definition was unnecessary.&nbsp; Would you =
agree?</div><div class=3D""><br class=3D""></div><div class=3D"">And to =
follow up, indeed the call</div><span class=3D""><div class=3D""><br =
class=3D""></div><div class=3D"">Hamiltonian *H =3D new =
Hamiltonian();</div><div class=3D""><br class=3D""></div></span><div =
class=3D"">succeeds, but adding</div><div class=3D""><br =
class=3D""></div><div class=3D"">delete H;</div><div class=3D""><br =
class=3D""></div><div class=3D"">causes the segfault.&nbsp; =
Fascinating.&nbsp; So the problem is not with boost::shared_ptr.&nbsp; =
FYI, ripping everything out of the plugin structure and simply building =
it into a main() runs just fine.</div><span class=3D"HOEnZb"><font =
color=3D"#888888" class=3D""><div class=3D""><br class=3D""></div><div =
class=3D"">-Daniel</div></font></span></div><div =
class=3D"gmail_extra"><span class=3D""><br clear=3D"all" class=3D""><div =
class=3D""><div class=3D""><div dir=3D"ltr" class=3D"">--<div =
class=3D"">Prof. T. Daniel Crawford</div><div class=3D""><a =
href=3D"mailto:crawdad@vt.edu" target=3D"_blank" =
class=3D"">crawdad@vt.edu</a></div></div></div></div>
<br class=3D""></span><div class=3D""><div class=3D"h5"><div =
class=3D"gmail_quote">On Sat, Jul 25, 2015 at 2:29 AM, Andrew Simmonett =
<span dir=3D"ltr" class=3D"">&lt;<a =
href=3D"mailto:andy.simmonett@gmail.com" target=3D"_blank" =
class=3D"">andy.simmonett@gmail.com</a>&gt;</span> wrote:<br =
class=3D""><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
.8ex;border-left:1px #ccc solid;padding-left:1ex"><div =
style=3D"word-wrap:break-word" class=3D"">Daniel,<div class=3D""><br =
class=3D""></div><div class=3D"">H(); succeeds because it=E2=80=99s not =
actually initializing anything, per point b) of this:</div><div =
class=3D""><br class=3D""></div><div class=3D""><a =
href=3D"http://herbsutter.com/2013/05/09/gotw-1-solution/" =
target=3D"_blank" =
class=3D"">http://herbsutter.com/2013/05/09/gotw-1-solution/</a></div><div=
 class=3D""><br class=3D""></div><div class=3D"">The only reason I =
remember that is because it cost me a few days of my life when debugging =
a problem a few years ago.&nbsp; It=E2=80=99s obviously not the =
destruction of the shared ptr if =E2=80=9CHamiltonian H;=E2=80=9D causes =
issues.&nbsp; The next question is whether the creation or the =
destruction of the object is to blame.&nbsp; What about creating an =
object</div><div class=3D""><br class=3D""></div><div class=3D""><span =
style=3D"white-space:pre-wrap" class=3D"">	</span>Hamiltonian *H =3D =
new Hamiltonian();</div><div class=3D""><br class=3D""></div><div =
class=3D"">but not destroying it?&nbsp; I suspect that will run, because =
I think tearing down the object is causing issues.&nbsp; If it does run =
successfully, does adding</div><div class=3D""><br class=3D""></div><div =
class=3D""><span style=3D"white-space:pre-wrap" class=3D"">	=
</span>delete H;</div><div class=3D""><br class=3D""></div><div =
class=3D"">break the code?&nbsp; I=E2=80=99m really baffled by this bug, =
and am interested to find the cause.</div><div class=3D""><br =
class=3D""></div><div class=3D"">Andy.</div><div class=3D""><div =
class=3D""><div class=3D""><br class=3D""><div class=3D""><blockquote =
type=3D"cite" class=3D""><div class=3D"">On Jul 24, 2015, at 10:04 PM, =
T. Daniel Crawford &lt;<a href=3D"mailto:crawdad@vt.edu" target=3D"_blank"=
 class=3D"">crawdad@vt.edu</a>&gt; wrote:</div><br class=3D""><div =
class=3D""><div dir=3D"ltr" class=3D"">Interesting.&nbsp; This =
succeeds:<div class=3D""><br class=3D""></div><div class=3D""><div =
class=3D"">&nbsp; Hamiltonian H();</div></div><div class=3D""><br =
class=3D""></div><div class=3D"">But this fails:</div><div class=3D""><br =
class=3D""></div><div class=3D""><div class=3D"">&nbsp; =
boost::shared_ptr&lt;Hamiltonian&gt; H(new =
Hamiltonian());</div></div><div class=3D""><br class=3D""></div><div =
class=3D""><div class=3D""><div class=3D"">As does this:<br =
class=3D""></div></div></div><div class=3D""><br class=3D""></div><div =
class=3D""><div class=3D"">&nbsp; Hamiltonian H;</div></div><div =
class=3D""><br class=3D""></div><div class=3D"">I do not yet know =
why.</div><div class=3D""><div class=3D""><br class=3D""></div></div><div =
class=3D"">-TDC</div></div><div class=3D"gmail_extra"><br clear=3D"all" =
class=3D""><div class=3D""><div class=3D""><div dir=3D"ltr" =
class=3D"">--<div class=3D"">Prof. T. Daniel Crawford</div><div =
class=3D""><a href=3D"mailto:crawdad@vt.edu" target=3D"_blank" =
class=3D"">crawdad@vt.edu</a></div></div></div></div>
<br class=3D""><div class=3D"gmail_quote">On Fri, Jul 24, 2015 at 4:47 =
PM, Andrew Simmonett <span dir=3D"ltr" class=3D"">&lt;<a =
href=3D"mailto:andy.simmonett@gmail.com" target=3D"_blank" =
class=3D"">andy.simmonett@gmail.com</a>&gt;</span> wrote:<br =
class=3D""><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
.8ex;border-left:1px #ccc solid;padding-left:1ex"><div =
style=3D"word-wrap:break-word" class=3D"">Daniel,<div class=3D""><br =
class=3D""></div><div class=3D"">Sorry, I was on a conference call with =
Jay Ponder.&nbsp; What happens if you remove the shared pointer, and =
instantiate the object without using =E2=80=9Cnew=E2=80=9D?</div><div =
class=3D""><br class=3D""></div><div class=3D""><br class=3D""><div =
class=3D""><blockquote type=3D"cite" class=3D""><span class=3D""><div =
class=3D"">On Jul 24, 2015, at 1:39 PM, T. Daniel Crawford &lt;<a =
href=3D"mailto:crawdad@vt.edu" target=3D"_blank" =
class=3D"">crawdad@vt.edu</a>&gt; wrote:</div><br class=3D""></span><div =
class=3D""><span class=3D""><div dir=3D"ltr" class=3D"">I still get a =
segfault on exit.&nbsp; I should also note that, when I add other calls =
instead of the Hamiltonian instantiation, I see no problems, e.g.:<div =
class=3D""><br class=3D""></div><div class=3D""><div class=3D"">&nbsp; =
boost::shared_ptr&lt;Wavefunction&gt; ref =3D =
Process::environment.wavefunction();</div></div><div class=3D""><br =
class=3D""></div><div class=3D"">What could be special about that =
Hamiltonian class?</div></div></span><div class=3D"gmail_extra"><span =
class=3D""><br clear=3D"all" class=3D""><div class=3D""><div =
class=3D""><div dir=3D"ltr" class=3D"">--<div class=3D"">Prof. T. Daniel =
Crawford</div><div class=3D""><a href=3D"mailto:crawdad@vt.edu" =
target=3D"_blank" class=3D"">crawdad@vt.edu</a></div></div></div></div>
<br class=3D""></span><div class=3D"gmail_quote"><span class=3D"">On =
Fri, Jul 24, 2015 at 3:35 PM, Andrew Simmonett <span dir=3D"ltr" =
class=3D"">&lt;<a href=3D"mailto:andy.simmonett@gmail.com" =
target=3D"_blank" class=3D"">andy.simmonett@gmail.com</a>&gt;</span> =
wrote:<br class=3D""></span><blockquote class=3D"gmail_quote" =
style=3D"margin:0 0 0 .8ex;border-left:1px #ccc =
solid;padding-left:1ex"><div style=3D"word-wrap:break-word" =
class=3D""><span class=3D"">Daniel,<div class=3D""><br =
class=3D""></div><div class=3D"">I wonder if the cleanup of the plugin =
happens too late.&nbsp; That is, perhaps the boost::shared_ptr reaches a =
count of zero after the return statement but, for some strange reason, =
the plugin code has already been unloaded. Then it=E2=80=99d be trying =
to call d=E2=80=99tor code that is no longer around.&nbsp; The way to =
test this is to leave the code that creates the instance intact but call =
H.reset() immediately before the return statement.&nbsp; I seriously =
doubt that=E2=80=99s the cause, but it=E2=80=99s worth =
eliminating.</div><div class=3D""><br class=3D""></div><div =
class=3D"">Andy.</div><div class=3D""><br class=3D""></div></span><div =
class=3D""><br class=3D""><div class=3D""><blockquote type=3D"cite" =
class=3D""><span class=3D""><div class=3D"">On Jul 24, 2015, at 1:28 PM, =
T. Daniel Crawford &lt;<a href=3D"mailto:crawdad@vt.edu" target=3D"_blank"=
 class=3D"">crawdad@vt.edu</a>&gt; wrote:</div><br class=3D""></span><div =
class=3D""><div dir=3D"ltr" class=3D""><span class=3D""><span =
class=3D"">I'm going insane.&nbsp; I have a useful plugin that I'd like =
to execute on a better computing cluster (CentOS, Intel/15.3, =
MKL/11.2.3, etc.), but I get a segfault at the plugin's exit that I =
can't track.&nbsp; Interactive debuggers aren't functioning on the =
system for some reason, so I started ripping out pieces of the code to =
narrow the problem down.&nbsp; I determined that the error occurs =
because of a constructor I've created, but even when I rip the class =
down to absolutely nothing, the segfault remains.&nbsp; Seriously, =
here's the code in its entirety:<div class=3D""><br =
class=3D""></div></span></span><div class=3D""><a =
href=3D"http://ugamp.cc/" target=3D"_blank" =
class=3D"">ugamp.cc</a>:</div><div class=3D""><br class=3D""></div><div =
class=3D""><div class=3D""><div class=3D""><div class=3D""><div =
class=3D""><div class=3D"">#include "hamiltonian.h"</div><div =
class=3D""><br class=3D""></div><div class=3D"">#include =
&lt;libplugin/plugin.h&gt;</div><div class=3D"">#include =
&lt;psi4-dec.h&gt;</div><div class=3D"">#include =
&lt;liboptions/liboptions.h&gt;</div><div class=3D""><br =
class=3D""></div><div class=3D"">INIT_PLUGIN</div><div class=3D""><br =
class=3D""></div><div class=3D"">using namespace boost;</div><div =
class=3D""><br class=3D""></div><div class=3D"">namespace psi { =
namespace ugamp {</div><div class=3D""><br class=3D""></div><div =
class=3D"">extern "C"</div><div class=3D"">int read_options(std::string =
name, Options&amp; options)</div><div class=3D"">{</div><div =
class=3D"">&nbsp; if(name =3D=3D "UGAMP" || options.read_globals()) =
{</div><div class=3D"">&nbsp; &nbsp; options.add_int("PRINT", =
1);</div><div class=3D"">&nbsp; &nbsp; options.add_str("REFERENCE", =
"RHF");</div><div class=3D"">&nbsp; &nbsp; options.add_str("WFN", =
"CCSD", "MP2 MP3 MP4 CCSD CCSD_T");</div><div class=3D"">&nbsp; =
}</div><div class=3D""><br class=3D""></div><div class=3D"">&nbsp; =
return true;</div><div class=3D"">}</div><div class=3D""><br =
class=3D""></div><div class=3D"">extern "C"</div><div =
class=3D"">PsiReturnType ugamp(Options&amp; options)</div><div =
class=3D"">{</div><div class=3D"">&nbsp; =
boost::shared_ptr&lt;Hamiltonian&gt; H(new Hamiltonian());</div><div =
class=3D""><br class=3D""></div><div class=3D"">&nbsp; return =
Success;</div><div class=3D"">}</div><div class=3D""><br =
class=3D""></div><div class=3D"">}} // End namespaces</div><div =
class=3D""><br class=3D""></div><div class=3D""><br class=3D""></div><div =
class=3D"">hamiltonian.h:</div><div class=3D""><br class=3D""></div><div =
class=3D""><div class=3D"">#ifndef HAMILTONIAN_H</div><div =
class=3D"">#define HAMILTONIAN_H</div><div class=3D""><br =
class=3D""></div><div class=3D"">namespace psi {</div><div class=3D""><br =
class=3D""></div><div class=3D"">class Hamiltonian {</div><div =
class=3D"">public:</div><div class=3D"">&nbsp; Hamiltonian();</div><div =
class=3D"">&nbsp; ~Hamiltonian();</div><div class=3D""><br =
class=3D""></div><div class=3D"">}; // Hamiltonian</div><div =
class=3D""><br class=3D""></div><div class=3D"">} // psi</div><div =
class=3D""><br class=3D""></div><div class=3D"">#endif // =
HAMILTONIAN_H</div></div><div class=3D""><br =
class=3D""></div></div></div></div></div><div class=3D""><a =
href=3D"http://hamiltonian.cc/" target=3D"_blank" =
class=3D"">hamiltonian.cc</a>:</div><span class=3D""><span class=3D""><div=
 class=3D""><br class=3D""></div><div class=3D""><div class=3D"">#include =
"hamiltonian.h"</div><div class=3D""><br class=3D""></div><div =
class=3D"">namespace psi {</div><div class=3D""><br class=3D""></div><div =
class=3D"">Hamiltonian::Hamiltonian()</div><div class=3D"">{</div><div =
class=3D"">}</div><div class=3D""><br class=3D""></div><div =
class=3D"">Hamiltonian::~Hamiltonian()</div><div class=3D"">{</div><div =
class=3D"">}</div><div class=3D""><br class=3D""></div><div class=3D"">} =
// namespace psi</div></div><div class=3D""><br class=3D""></div><div =
class=3D"">If I comment out the "boost::shared_ptr&lt;Hamiltonian&gt; =
H(new Hamiltonian());" line, psi4 runs with no problems, but if I =
include it, I get a segfault.&nbsp; There's NOTHING there?&nbsp; What =
the hell could be going on?</div><div class=3D""><br class=3D""></div><div=
 class=3D"">-TDC</div><div class=3D""><br class=3D""></div><div =
class=3D""><div class=3D""><div class=3D""><div dir=3D"ltr" =
class=3D"">--<div class=3D"">Prof. T. Daniel Crawford</div><div =
class=3D""><a href=3D"mailto:crawdad@vt.edu" target=3D"_blank" =
class=3D"">crawdad@vt.edu</a></div></div></div></div>
</div></span></span></div></div>
</div></blockquote></div><br class=3D""></div></div></blockquote></div><br=
 class=3D""></div>
</div></blockquote></div><br class=3D""></div></div></blockquote></div><br=
 class=3D""></div>
</div></blockquote></div><br =
class=3D""></div></div></div></div></blockquote></div><br =
class=3D""></div></div></div>
</blockquote></div><br class=3D""></div></div>
</div></blockquote></div><br class=3D""></div></body></html>=

--Apple-Mail=_A0E61775-87B8-4030-8AB8-B1767C352BEB--
