Delivered-To: amjames2@vt.edu
Received: by 10.140.25.151 with SMTP id 23csp1221991qgt;
        Sun, 26 Jul 2015 19:18:20 -0700 (PDT)
X-Received: by 10.55.20.24 with SMTP id e24mr37547562qkh.35.1437963500096;
        Sun, 26 Jul 2015 19:18:20 -0700 (PDT)
Return-Path: <crawdad@vt.edu>
Received: from mr6.cc.vt.edu (mr6.cc.ipv6.vt.edu. [2001:468:c80:2105:0:250:3bcb:5b17])
        by mx.google.com with ESMTPS id f79si19339543qki.10.2015.07.26.19.18.19
        for <amjames2@vt.edu>
        (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sun, 26 Jul 2015 19:18:20 -0700 (PDT)
Received-SPF: softfail (google.com: domain of transitioning crawdad@vt.edu does not designate 209.85.213.179 as permitted sender) client-ip=209.85.213.179;
Authentication-Results: mx.google.com;
       spf=softfail (google.com: domain of transitioning crawdad@vt.edu does not designate 209.85.213.179 as permitted sender) smtp.mail=crawdad@vt.edu
Received: from mail-ig0-f179.google.com (mail-ig0-f179.google.com [209.85.213.179])
	by mr6.cc.vt.edu (8.14.4/8.14.4) with ESMTP id t6R2ID1k018059
	for <amjames2@vt.edu>; Sun, 26 Jul 2015 22:18:18 -0400
Received: by igbpg9 with SMTP id pg9so74078654igb.0
        for <amjames2@vt.edu>; Sun, 26 Jul 2015 19:18:13 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:cc:content-type;
        bh=TQnDccT+5BPqZwKFSk5OA330wLIteHML3LhH//tyreQ=;
        b=ZH7m/XBKQyszbWHKyfsu1Uv9BGWjgCBOM65/tc6R6iDR/uKx+XZe7PH5g5876uNN5F
         250zgSnX7H4TJBrMB8J+0KF20FqmjFbnNSqIrH7X+Q1w5cyOCUsTtxV13xTCHLqbSC5q
         rQvSnrVCTpAW+RzDXf+124h7vjg3kqnMQEj4WGFxeFUtPkdxuoFQ5TYL4+YBhEn5+hwi
         8AfuZ8fxUdu4qm8l2/k6c+k0GXtkVjaj2QNwjLSY+nId9u1qEzugY5FHZEx3rrBV4+v1
         u1DJ62WmYxXK8NLYIkVl/FdBFRBaSAd3J0mBdaRzAHObk54+yj/Xxxan5rLeO5MPFvjl
         Bjew==
X-Gm-Message-State: ALoCoQkcJnePJeWbHeJJM/SL1NHY8c5dQm1WsbBGhOeXGua6PhONwnZXNCGnzYnIHC1NF3RCGljfxIEzFhxi/b2f9PxSkiHYIeyu5tVGrBgIoZkTl19yerfH5vKNqg8uYlu8MiKwdQVS1yPJ6zn5vr7vQ/ixRMGggQ==
X-Received: by 10.50.39.114 with SMTP id o18mr13065239igk.75.1437963493458;
        Sun, 26 Jul 2015 19:18:13 -0700 (PDT)
MIME-Version: 1.0
X-Received: by 10.50.39.114 with SMTP id o18mr13065224igk.75.1437963493294;
 Sun, 26 Jul 2015 19:18:13 -0700 (PDT)
Received: by 10.107.55.87 with HTTP; Sun, 26 Jul 2015 19:18:13 -0700 (PDT)
In-Reply-To: <CAH0V_1agfSjFK5gzUr=Uo7eW6ZCYZ=H4=UF3GhPLcdJ7QCf-Qg@mail.gmail.com>
References: <CAH0V_1Zbej=6ZAM3N_LJfr_cB047y3k=+QLuK8mxM=+rCiPAdw@mail.gmail.com>
	<22527015-70FA-4E7E-94C5-7FB6A5AD6F7E@gmail.com>
	<CAH0V_1bP3uy64m1rLZWKec8=k+5sD-yS8MyPpP7nw0PtL_2DuA@mail.gmail.com>
	<6A1F4E6D-CA9D-4F2B-8C3C-F76C4738D18C@gmail.com>
	<CAH0V_1bUvzC38iGRGeFJsh2=XEUzSPya5Nxb3DuK7XgiXKsD5Q@mail.gmail.com>
	<6CC01FBA-6330-40AA-A551-F20D687A2FA0@gmail.com>
	<CAH0V_1agfSjFK5gzUr=Uo7eW6ZCYZ=H4=UF3GhPLcdJ7QCf-Qg@mail.gmail.com>
Date: Sun, 26 Jul 2015 22:18:13 -0400
Message-ID: <CAH0V_1YzGBYzOjdKDczJD3W2zTavpb4rC3Q_m6CpbaG=5a1U7Q@mail.gmail.com>
Subject: Re: Insane segfault
From: "T. Daniel Crawford" <crawdad@vt.edu>
To: Andrew Simmonett <andy.simmonett@gmail.com>
Cc: Justin Turney <justin.turney@gmail.com>,
        David Sherrill <sherrill@gatech.edu>,
        Lori Burns <lori.burns@gmail.com>,
        Roberto Di Remigio <roberto.diremigio@gmail.com>,
        Ashutosh Kumar <akumar1@vt.edu>, Andrew James <amjames2@vt.edu>
Content-Type: multipart/alternative; boundary=047d7b33962137e5a4051bd1f725
X-Spam-Status: No, score=-0.7 required=5.0 tests=HTML_MESSAGE,
	RCVD_IN_DNSWL_LOW autolearn=disabled version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mr6.cc.vt.edu
X-Gm-Spam: 0
X-Gm-Phishy: 0
X-Gm-Spam: 0
X-Gm-Phishy: 0

--047d7b33962137e5a4051bd1f725
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Hi, all,

Andy and I have been having a discussion about segfaults I've encountered
when trying to execute PSI4 plugins on my Intel-based clusters.  We've seen
some strange behavior with objects from essentially empty classes causing
the code to crash when the plugin exits. (You can see our back and forth
below, if you're interested.  These problems do not occur on my Macs.)

Well, I'm expanding the conversation to include all of you because my
observations have gotten weirder. On two different computing systems using
Intel compilers (14.0.3 and 15.3), I get a segfault for a blank plugin
(called, appropriately, "junk") for which I add a trivial Hamiltonian
class, defined as follows:

hamiltonian.h:

namespace psi {

class Hamiltonian {

public:

  Hamiltonian();

  ~Hamiltonian();

};

}

hamiltonian.cc:

#include "hamiltonian.h"

namespace psi {

Hamiltonian::Hamiltonian() { }

Hamiltonian::~Hamiltonian() { }

}

In junk.cc, the *only* changes from the default created by "psi4
--new-plugin" are:

#include "hamiltonian.h"


INIT_PLUGIN

and

    Hamiltonian A;


    return Success;

HOWEVER, if I instead do EXACTLY the same thing, but every instance of the
word "Hamiltonian" is replaced by "myclass" and I create myclass.h and
myclass.cc defined similarly as above, psi4 does not segfault.  This is
bizarre.

Another observation: if I get rid of hamiltonian.cc and define the
constructor and destructor inside hamiltonian.h as:

namespace psi {

class Hamiltonian {

public:

  Hamiltonian() {};

  ~Hamiltonian() {};

};

}

the code runs without complaint.  I cannot yet explain this behavior.
Maybe you can see a straightforward answer.

Best regards,

-Daniel
--
Prof. T. Daniel Crawford
crawdad@vt.edu

On Sat, Jul 25, 2015 at 9:10 PM, T. Daniel Crawford <crawdad@vt.edu> wrote:

> OK, so if I understand the website to which you referred (which I love, b=
y
> the way),
>
> Hamiltonian H();
>
> means H is a function that returns a Hamiltonian object, so the reason th=
e
> code didn't produce a segfault is because I declared a function I never
> called, so a definition was unnecessary.  Would you agree?
>
> And to follow up, indeed the call
>
> Hamiltonian *H =3D new Hamiltonian();
>
> succeeds, but adding
>
> delete H;
>
> causes the segfault.  Fascinating.  So the problem is not with
> boost::shared_ptr.  FYI, ripping everything out of the plugin structure a=
nd
> simply building it into a main() runs just fine.
>
> -Daniel
>
> --
> Prof. T. Daniel Crawford
> crawdad@vt.edu
>
> On Sat, Jul 25, 2015 at 2:29 AM, Andrew Simmonett <
> andy.simmonett@gmail.com> wrote:
>
>> Daniel,
>>
>> H(); succeeds because it=E2=80=99s not actually initializing anything, p=
er point
>> b) of this:
>>
>> http://herbsutter.com/2013/05/09/gotw-1-solution/
>>
>> The only reason I remember that is because it cost me a few days of my
>> life when debugging a problem a few years ago.  It=E2=80=99s obviously n=
ot the
>> destruction of the shared ptr if =E2=80=9CHamiltonian H;=E2=80=9D causes=
 issues.  The next
>> question is whether the creation or the destruction of the object is to
>> blame.  What about creating an object
>>
>> Hamiltonian *H =3D new Hamiltonian();
>>
>> but not destroying it?  I suspect that will run, because I think tearing
>> down the object is causing issues.  If it does run successfully, does ad=
ding
>>
>> delete H;
>>
>> break the code?  I=E2=80=99m really baffled by this bug, and am interest=
ed to
>> find the cause.
>>
>> Andy.
>>
>> On Jul 24, 2015, at 10:04 PM, T. Daniel Crawford <crawdad@vt.edu> wrote:
>>
>> Interesting.  This succeeds:
>>
>>   Hamiltonian H();
>>
>> But this fails:
>>
>>   boost::shared_ptr<Hamiltonian> H(new Hamiltonian());
>>
>> As does this:
>>
>>   Hamiltonian H;
>>
>> I do not yet know why.
>>
>> -TDC
>>
>> --
>> Prof. T. Daniel Crawford
>> crawdad@vt.edu
>>
>> On Fri, Jul 24, 2015 at 4:47 PM, Andrew Simmonett <
>> andy.simmonett@gmail.com> wrote:
>>
>>> Daniel,
>>>
>>> Sorry, I was on a conference call with Jay Ponder.  What happens if you
>>> remove the shared pointer, and instantiate the object without using =E2=
=80=9Cnew=E2=80=9D?
>>>
>>>
>>> On Jul 24, 2015, at 1:39 PM, T. Daniel Crawford <crawdad@vt.edu> wrote:
>>>
>>> I still get a segfault on exit.  I should also note that, when I add
>>> other calls instead of the Hamiltonian instantiation, I see no problems=
,
>>> e.g.:
>>>
>>>   boost::shared_ptr<Wavefunction> ref =3D
>>> Process::environment.wavefunction();
>>>
>>> What could be special about that Hamiltonian class?
>>>
>>> --
>>> Prof. T. Daniel Crawford
>>> crawdad@vt.edu
>>>
>>> On Fri, Jul 24, 2015 at 3:35 PM, Andrew Simmonett <
>>> andy.simmonett@gmail.com> wrote:
>>>
>>>> Daniel,
>>>>
>>>> I wonder if the cleanup of the plugin happens too late.  That is,
>>>> perhaps the boost::shared_ptr reaches a count of zero after the return
>>>> statement but, for some strange reason, the plugin code has already be=
en
>>>> unloaded. Then it=E2=80=99d be trying to call d=E2=80=99tor code that =
is no longer around.
>>>> The way to test this is to leave the code that creates the instance in=
tact
>>>> but call H.reset() immediately before the return statement.  I serious=
ly
>>>> doubt that=E2=80=99s the cause, but it=E2=80=99s worth eliminating.
>>>>
>>>> Andy.
>>>>
>>>>
>>>> On Jul 24, 2015, at 1:28 PM, T. Daniel Crawford <crawdad@vt.edu> wrote=
:
>>>>
>>>> I'm going insane.  I have a useful plugin that I'd like to execute on =
a
>>>> better computing cluster (CentOS, Intel/15.3, MKL/11.2.3, etc.), but I=
 get
>>>> a segfault at the plugin's exit that I can't track.  Interactive debug=
gers
>>>> aren't functioning on the system for some reason, so I started ripping=
 out
>>>> pieces of the code to narrow the problem down.  I determined that the =
error
>>>> occurs because of a constructor I've created, but even when I rip the =
class
>>>> down to absolutely nothing, the segfault remains.  Seriously, here's t=
he
>>>> code in its entirety:
>>>>
>>>> ugamp.cc:
>>>>
>>>> #include "hamiltonian.h"
>>>>
>>>> #include <libplugin/plugin.h>
>>>> #include <psi4-dec.h>
>>>> #include <liboptions/liboptions.h>
>>>>
>>>> INIT_PLUGIN
>>>>
>>>> using namespace boost;
>>>>
>>>> namespace psi { namespace ugamp {
>>>>
>>>> extern "C"
>>>> int read_options(std::string name, Options& options)
>>>> {
>>>>   if(name =3D=3D "UGAMP" || options.read_globals()) {
>>>>     options.add_int("PRINT", 1);
>>>>     options.add_str("REFERENCE", "RHF");
>>>>     options.add_str("WFN", "CCSD", "MP2 MP3 MP4 CCSD CCSD_T");
>>>>   }
>>>>
>>>>   return true;
>>>> }
>>>>
>>>> extern "C"
>>>> PsiReturnType ugamp(Options& options)
>>>> {
>>>>   boost::shared_ptr<Hamiltonian> H(new Hamiltonian());
>>>>
>>>>   return Success;
>>>> }
>>>>
>>>> }} // End namespaces
>>>>
>>>>
>>>> hamiltonian.h:
>>>>
>>>> #ifndef HAMILTONIAN_H
>>>> #define HAMILTONIAN_H
>>>>
>>>> namespace psi {
>>>>
>>>> class Hamiltonian {
>>>> public:
>>>>   Hamiltonian();
>>>>   ~Hamiltonian();
>>>>
>>>> }; // Hamiltonian
>>>>
>>>> } // psi
>>>>
>>>> #endif // HAMILTONIAN_H
>>>>
>>>> hamiltonian.cc:
>>>>
>>>> #include "hamiltonian.h"
>>>>
>>>> namespace psi {
>>>>
>>>> Hamiltonian::Hamiltonian()
>>>> {
>>>> }
>>>>
>>>> Hamiltonian::~Hamiltonian()
>>>> {
>>>> }
>>>>
>>>> } // namespace psi
>>>>
>>>> If I comment out the "boost::shared_ptr<Hamiltonian> H(new
>>>> Hamiltonian());" line, psi4 runs with no problems, but if I include it=
, I
>>>> get a segfault.  There's NOTHING there?  What the hell could be going =
on?
>>>>
>>>> -TDC
>>>>
>>>> --
>>>> Prof. T. Daniel Crawford
>>>> crawdad@vt.edu
>>>>
>>>>
>>>>
>>>
>>>
>>
>>
>

--047d7b33962137e5a4051bd1f725
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Hi, all,</div><div><br></div><div>Andy and I have bee=
n having a discussion about segfaults I&#39;ve encountered when trying to e=
xecute PSI4 plugins on my Intel-based clusters.=C2=A0 We&#39;ve seen some s=
trange behavior with objects from essentially empty classes causing the cod=
e to crash when the plugin exits. (You can see our back and forth below, if=
 you&#39;re interested.=C2=A0 These problems do not occur on my Macs.) =C2=
=A0</div><div><br></div><div>Well, I&#39;m expanding the conversation to in=
clude all of you because my observations have gotten weirder. On two differ=
ent computing systems using Intel compilers (14.0.3 and 15.3), I get a segf=
ault for a blank plugin (called, appropriately, &quot;junk&quot;) for which=
 I add a trivial Hamiltonian class, defined as follows:</div><div><br></div=
><div>hamiltonian.h:</div><div><br></div><div><p style=3D"margin:0px;font-s=
ize:11px;font-family:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,=
0)">namespace psi {</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">class Hamiltonian {</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">public:</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">=C2=A0 Hamiltonian();</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">=C2=A0 ~Hamiltonian();</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">};</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">}</p></div><div><br></div><div>hamiltonian=
.cc:</div><div><br></div><div><p style=3D"margin:0px;font-size:11px;font-fa=
mily:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,0)">#include &qu=
ot;hamiltonian.h&quot;</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">namespace psi {</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">Hamiltonian::Hamiltonian() { }</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">Hamiltonian::~Hamiltonian() { }</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">}</p></div><div><br></div><div>In junk.cc,=
 the *only* changes from the default created by &quot;psi4 --new-plugin&quo=
t; are:</div><div><br></div><div><p style=3D"margin:0px;font-size:11px;font=
-family:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,0)">#include =
&quot;hamiltonian.h&quot;</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0);min-height:13px"><br></p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">INIT_PLUGIN</p></div><div><br></div><div>a=
nd</div><div><br></div><div><p style=3D"margin:0px;font-size:11px;font-fami=
ly:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,0)">=C2=A0 =C2=A0=
=C2=A0Hamiltonian A;</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0);min-height:13px"><br></p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">=C2=A0 =C2=A0 return Success;</p></div><di=
v class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">HOWEVER, if I =
instead do EXACTLY the same thing, but every instance of the word &quot;Ham=
iltonian&quot; is replaced by &quot;myclass&quot; and I create myclass.h an=
d myclass.cc defined similarly as above, psi4 does not segfault.=C2=A0 This=
 is bizarre.</div><div class=3D"gmail_extra"><br></div><div class=3D"gmail_=
extra">Another observation: if I get rid of hamiltonian.cc and define the c=
onstructor and destructor inside hamiltonian.h as:</div><div class=3D"gmail=
_extra"><br></div><div class=3D"gmail_extra"><p style=3D"margin:0px;font-si=
ze:11px;font-family:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,0=
)">namespace psi {</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">class Hamiltonian {</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">public:</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">=C2=A0 Hamiltonian() {};</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">=C2=A0 ~Hamiltonian() {};</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">};</p>
<p style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,2=
39);background-color:rgb(0,0,0)">}</p><div><br></div><div>the code runs wit=
hout complaint.=C2=A0 I cannot yet explain this behavior.=C2=A0 Maybe you c=
an see a straightforward answer.</div><div><br></div><div>Best regards,</di=
v><div><br></div><div>-Daniel</div></div><div class=3D"gmail_extra"><div><d=
iv class=3D"gmail_signature"><div dir=3D"ltr">--<div>Prof. T. Daniel Crawfo=
rd</div><div><a href=3D"mailto:crawdad@vt.edu" target=3D"_blank">crawdad@vt=
.edu</a></div></div></div></div>
<br><div class=3D"gmail_quote">On Sat, Jul 25, 2015 at 9:10 PM, T. Daniel C=
rawford <span dir=3D"ltr">&lt;<a href=3D"mailto:crawdad@vt.edu" target=3D"_=
blank">crawdad@vt.edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
x"><div dir=3D"ltr">OK, so if I understand the website to which you referre=
d (which I love, by the way),<div><br></div><div>Hamiltonian H();</div><div=
><br></div><div>means H is a function that returns a Hamiltonian object, so=
 the reason the code didn&#39;t produce a segfault is because I declared a =
function I never called, so a definition was unnecessary.=C2=A0 Would you a=
gree?</div><div><br></div><div>And to follow up, indeed the call</div><span=
 class=3D""><div><br></div><div>Hamiltonian *H =3D new Hamiltonian();</div>=
<div><br></div></span><div>succeeds, but adding</div><div><br></div><div>de=
lete H;</div><div><br></div><div>causes the segfault.=C2=A0 Fascinating.=C2=
=A0 So the problem is not with boost::shared_ptr.=C2=A0 FYI, ripping everyt=
hing out of the plugin structure and simply building it into a main() runs =
just fine.</div><span class=3D"HOEnZb"><font color=3D"#888888"><div><br></d=
iv><div>-Daniel</div></font></span></div><div class=3D"gmail_extra"><span c=
lass=3D""><br clear=3D"all"><div><div><div dir=3D"ltr">--<div>Prof. T. Dani=
el Crawford</div><div><a href=3D"mailto:crawdad@vt.edu" target=3D"_blank">c=
rawdad@vt.edu</a></div></div></div></div>
<br></span><div><div class=3D"h5"><div class=3D"gmail_quote">On Sat, Jul 25=
, 2015 at 2:29 AM, Andrew Simmonett <span dir=3D"ltr">&lt;<a href=3D"mailto=
:andy.simmonett@gmail.com" target=3D"_blank">andy.simmonett@gmail.com</a>&g=
t;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0=
 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div style=3D"word-wrap:=
break-word">Daniel,<div><br></div><div>H(); succeeds because it=E2=80=99s n=
ot actually initializing anything, per point b) of this:</div><div><br></di=
v><div><a href=3D"http://herbsutter.com/2013/05/09/gotw-1-solution/" target=
=3D"_blank">http://herbsutter.com/2013/05/09/gotw-1-solution/</a></div><div=
><br></div><div>The only reason I remember that is because it cost me a few=
 days of my life when debugging a problem a few years ago.=C2=A0 It=E2=80=
=99s obviously not the destruction of the shared ptr if =E2=80=9CHamiltonia=
n H;=E2=80=9D causes issues.=C2=A0 The next question is whether the creatio=
n or the destruction of the object is to blame.=C2=A0 What about creating a=
n object</div><div><br></div><div><span style=3D"white-space:pre-wrap">	</s=
pan>Hamiltonian *H =3D new Hamiltonian();</div><div><br></div><div>but not =
destroying it?=C2=A0 I suspect that will run, because I think tearing down =
the object is causing issues.=C2=A0 If it does run successfully, does addin=
g</div><div><br></div><div><span style=3D"white-space:pre-wrap">	</span>del=
ete H;</div><div><br></div><div>break the code?=C2=A0 I=E2=80=99m really ba=
ffled by this bug, and am interested to find the cause.</div><div><br></div=
><div>Andy.</div><div><div><div><br><div><blockquote type=3D"cite"><div>On =
Jul 24, 2015, at 10:04 PM, T. Daniel Crawford &lt;<a href=3D"mailto:crawdad=
@vt.edu" target=3D"_blank">crawdad@vt.edu</a>&gt; wrote:</div><br><div><div=
 dir=3D"ltr">Interesting.=C2=A0 This succeeds:<div><br></div><div><div>=C2=
=A0 Hamiltonian H();</div></div><div><br></div><div>But this fails:</div><d=
iv><br></div><div><div>=C2=A0 boost::shared_ptr&lt;Hamiltonian&gt; H(new Ha=
miltonian());</div></div><div><br></div><div><div><div>As does this:<br></d=
iv></div></div><div><br></div><div><div>=C2=A0 Hamiltonian H;</div></div><d=
iv><br></div><div>I do not yet know why.</div><div><div><br></div></div><di=
v>-TDC</div></div><div class=3D"gmail_extra"><br clear=3D"all"><div><div><d=
iv dir=3D"ltr">--<div>Prof. T. Daniel Crawford</div><div><a href=3D"mailto:=
crawdad@vt.edu" target=3D"_blank">crawdad@vt.edu</a></div></div></div></div=
>
<br><div class=3D"gmail_quote">On Fri, Jul 24, 2015 at 4:47 PM, Andrew Simm=
onett <span dir=3D"ltr">&lt;<a href=3D"mailto:andy.simmonett@gmail.com" tar=
get=3D"_blank">andy.simmonett@gmail.com</a>&gt;</span> wrote:<br><blockquot=
e class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc sol=
id;padding-left:1ex"><div style=3D"word-wrap:break-word">Daniel,<div><br></=
div><div>Sorry, I was on a conference call with Jay Ponder.=C2=A0 What happ=
ens if you remove the shared pointer, and instantiate the object without us=
ing =E2=80=9Cnew=E2=80=9D?</div><div><br></div><div><br><div><blockquote ty=
pe=3D"cite"><span><div>On Jul 24, 2015, at 1:39 PM, T. Daniel Crawford &lt;=
<a href=3D"mailto:crawdad@vt.edu" target=3D"_blank">crawdad@vt.edu</a>&gt; =
wrote:</div><br></span><div><span><div dir=3D"ltr">I still get a segfault o=
n exit.=C2=A0 I should also note that, when I add other calls instead of th=
e Hamiltonian instantiation, I see no problems, e.g.:<div><br></div><div><d=
iv>=C2=A0 boost::shared_ptr&lt;Wavefunction&gt; ref =3D Process::environmen=
t.wavefunction();</div></div><div><br></div><div>What could be special abou=
t that Hamiltonian class?</div></div></span><div class=3D"gmail_extra"><spa=
n><br clear=3D"all"><div><div><div dir=3D"ltr">--<div>Prof. T. Daniel Crawf=
ord</div><div><a href=3D"mailto:crawdad@vt.edu" target=3D"_blank">crawdad@v=
t.edu</a></div></div></div></div>
<br></span><div class=3D"gmail_quote"><span>On Fri, Jul 24, 2015 at 3:35 PM=
, Andrew Simmonett <span dir=3D"ltr">&lt;<a href=3D"mailto:andy.simmonett@g=
mail.com" target=3D"_blank">andy.simmonett@gmail.com</a>&gt;</span> wrote:<=
br></span><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bord=
er-left:1px #ccc solid;padding-left:1ex"><div style=3D"word-wrap:break-word=
"><span>Daniel,<div><br></div><div>I wonder if the cleanup of the plugin ha=
ppens too late.=C2=A0 That is, perhaps the boost::shared_ptr reaches a coun=
t of zero after the return statement but, for some strange reason, the plug=
in code has already been unloaded. Then it=E2=80=99d be trying to call d=E2=
=80=99tor code that is no longer around.=C2=A0 The way to test this is to l=
eave the code that creates the instance intact but call H.reset() immediate=
ly before the return statement.=C2=A0 I seriously doubt that=E2=80=99s the =
cause, but it=E2=80=99s worth eliminating.</div><div><br></div><div>Andy.</=
div><div><br></div></span><div><br><div><blockquote type=3D"cite"><span><di=
v>On Jul 24, 2015, at 1:28 PM, T. Daniel Crawford &lt;<a href=3D"mailto:cra=
wdad@vt.edu" target=3D"_blank">crawdad@vt.edu</a>&gt; wrote:</div><br></spa=
n><div><div dir=3D"ltr"><span><span>I&#39;m going insane.=C2=A0 I have a us=
eful plugin that I&#39;d like to execute on a better computing cluster (Cen=
tOS, Intel/15.3, MKL/11.2.3, etc.), but I get a segfault at the plugin&#39;=
s exit that I can&#39;t track.=C2=A0 Interactive debuggers aren&#39;t funct=
ioning on the system for some reason, so I started ripping out pieces of th=
e code to narrow the problem down.=C2=A0 I determined that the error occurs=
 because of a constructor I&#39;ve created, but even when I rip the class d=
own to absolutely nothing, the segfault remains.=C2=A0 Seriously, here&#39;=
s the code in its entirety:<div><br></div></span></span><div><a href=3D"htt=
p://ugamp.cc/" target=3D"_blank">ugamp.cc</a>:</div><div><br></div><div><di=
v><div><div><div><div>#include &quot;hamiltonian.h&quot;</div><div><br></di=
v><div>#include &lt;libplugin/plugin.h&gt;</div><div>#include &lt;psi4-dec.=
h&gt;</div><div>#include &lt;liboptions/liboptions.h&gt;</div><div><br></di=
v><div>INIT_PLUGIN</div><div><br></div><div>using namespace boost;</div><di=
v><br></div><div>namespace psi { namespace ugamp {</div><div><br></div><div=
>extern &quot;C&quot;</div><div>int read_options(std::string name, Options&=
amp; options)</div><div>{</div><div>=C2=A0 if(name =3D=3D &quot;UGAMP&quot;=
 || options.read_globals()) {</div><div>=C2=A0 =C2=A0 options.add_int(&quot=
;PRINT&quot;, 1);</div><div>=C2=A0 =C2=A0 options.add_str(&quot;REFERENCE&q=
uot;, &quot;RHF&quot;);</div><div>=C2=A0 =C2=A0 options.add_str(&quot;WFN&q=
uot;, &quot;CCSD&quot;, &quot;MP2 MP3 MP4 CCSD CCSD_T&quot;);</div><div>=C2=
=A0 }</div><div><br></div><div>=C2=A0 return true;</div><div>}</div><div><b=
r></div><div>extern &quot;C&quot;</div><div>PsiReturnType ugamp(Options&amp=
; options)</div><div>{</div><div>=C2=A0 boost::shared_ptr&lt;Hamiltonian&gt=
; H(new Hamiltonian());</div><div><br></div><div>=C2=A0 return Success;</di=
v><div>}</div><div><br></div><div>}} // End namespaces</div><div><br></div>=
<div><br></div><div>hamiltonian.h:</div><div><br></div><div><div>#ifndef HA=
MILTONIAN_H</div><div>#define HAMILTONIAN_H</div><div><br></div><div>namesp=
ace psi {</div><div><br></div><div>class Hamiltonian {</div><div>public:</d=
iv><div>=C2=A0 Hamiltonian();</div><div>=C2=A0 ~Hamiltonian();</div><div><b=
r></div><div>}; // Hamiltonian</div><div><br></div><div>} // psi</div><div>=
<br></div><div>#endif // HAMILTONIAN_H</div></div><div><br></div></div></di=
v></div></div><div><a href=3D"http://hamiltonian.cc/" target=3D"_blank">ham=
iltonian.cc</a>:</div><span><span><div><br></div><div><div>#include &quot;h=
amiltonian.h&quot;</div><div><br></div><div>namespace psi {</div><div><br><=
/div><div>Hamiltonian::Hamiltonian()</div><div>{</div><div>}</div><div><br>=
</div><div>Hamiltonian::~Hamiltonian()</div><div>{</div><div>}</div><div><b=
r></div><div>} // namespace psi</div></div><div><br></div><div>If I comment=
 out the &quot;boost::shared_ptr&lt;Hamiltonian&gt; H(new Hamiltonian());&q=
uot; line, psi4 runs with no problems, but if I include it, I get a segfaul=
t.=C2=A0 There&#39;s NOTHING there?=C2=A0 What the hell could be going on?<=
/div><div><br></div><div>-TDC</div><div><br></div><div><div><div><div dir=
=3D"ltr">--<div>Prof. T. Daniel Crawford</div><div><a href=3D"mailto:crawda=
d@vt.edu" target=3D"_blank">crawdad@vt.edu</a></div></div></div></div>
</div></span></span></div></div>
</div></blockquote></div><br></div></div></blockquote></div><br></div>
</div></blockquote></div><br></div></div></blockquote></div><br></div>
</div></blockquote></div><br></div></div></div></div></blockquote></div><br=
></div></div></div>
</blockquote></div><br></div></div>

--047d7b33962137e5a4051bd1f725--
