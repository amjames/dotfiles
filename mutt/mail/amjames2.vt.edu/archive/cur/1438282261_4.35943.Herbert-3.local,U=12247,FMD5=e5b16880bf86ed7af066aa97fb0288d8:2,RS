Delivered-To: amjames2@vt.edu
Received: by 10.140.25.151 with SMTP id 23csp551253qgt;
        Thu, 23 Jul 2015 11:13:37 -0700 (PDT)
X-Received: by 10.140.135.80 with SMTP id 77mr15268362qhh.8.1437675217058;
        Thu, 23 Jul 2015 11:13:37 -0700 (PDT)
Return-Path: <uas@vt.edu>
Received: from mr3.cc.vt.edu (mr3.cc.ipv6.vt.edu. [2001:468:c80:2105:0:2b9:e1ff:8be3])
        by mx.google.com with ESMTPS id y16si6867237qky.17.2015.07.23.11.13.36
        for <amjames2@vt.edu>
        (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 23 Jul 2015 11:13:37 -0700 (PDT)
Received-SPF: pass (google.com: domain of uas@vt.edu designates 2001:468:c80:2105:0:2b9:e1ff:8be3 as permitted sender)
Authentication-Results: mx.google.com;
       spf=pass (google.com: domain of uas@vt.edu designates 2001:468:c80:2105:0:2b9:e1ff:8be3 as permitted sender) smtp.mail=uas@vt.edu
Received: from aquifer.cc.vt.edu ([IPv6:2001:468:c80:2104:219:b9ff:feea:d908])
	by mr3.cc.vt.edu (8.14.4/8.14.4) with ESMTP id t6NIDVsi015631
	for <amjames2@vt.edu>; Thu, 23 Jul 2015 14:13:36 -0400
Received: from tickets.arc.vt.edu.hpc (tickets.arc.vt.edu.hpc [172.28.40.45])
	by aquifer.cc.vt.edu (Postfix) with ESMTP id 9683E3605D
	for <amjames2@vt.edu>; Thu, 23 Jul 2015 14:13:31 -0400 (EDT)
Received: by tickets.arc.vt.edu.hpc (Postfix, from userid 48)
	id 947508F7; Thu, 23 Jul 2015 14:13:31 -0400 (EDT)
Subject: [ARC Support #8605] ARC Help Request: module scripts 
From: "Justin August Krometis via RT" <arcsupport@vt.edu>
Reply-To: arcsupport@vt.edu
In-Reply-To: <20150723154332.B2276958@webhost11.hosting.vt.edu>
References: <RT-Ticket-8605@example.com> <20150723154332.B2276958@webhost11.hosting.vt.edu>
Message-ID: <rt-3.8.13-2919-1437675211-954.8605-6-0@example.com>
Precedence: bulk
X-RT-Loop-Prevention: Advanced Research Computing
RT-Ticket: Advanced Research Computing #8605
Managed-by: RT 3.8.13 (http://www.bestpractical.com/rt/)
RT-Originator: jkrometis@vt.edu
To: amjames2@vt.edu
MIME-Version: 1.0
X-RT-Original-Encoding: utf-8
Content-type: multipart/mixed; boundary="----------=_1437675211-2919-7"
Date: Thu, 23 Jul 2015 14:13:31 -0400
X-Spam-Status: No, score=1.3 required=5.0 tests=RDNS_NONE autolearn=disabled
	version=3.3.1
X-Spam-Level: *
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mr3.cc.vt.edu
X-Gm-Spam: 0
X-Gm-Phishy: 0
X-Gm-Spam: 0
X-Gm-Phishy: 0

This is a multi-part message in MIME format...

------------=_1437675211-2919-7
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset="utf-8"

AJ,
Keep in mind that running a shell script starts its own shell, so any modules
you load, environment variables you set, etc will be lost when the shell exits
(and returns to your command prompt). If you want to just run the commands in a
script without starting a new shell, you can use 'source' (e.g. source
test.sh).

Also, I have attached a script that I put together after seeing Dr. Crawford's
matrix multiplication example at the Software Summer School - it takes an
architecture or list of architectures (e.g., "gcc_atlas") and loads the
appropriate modules, then compiles. Example to run matrix multiply two times
for 4000 rows/columns with 16 threads and three different combinations of
compilers/BLAS:

./run_mm.sh -t 16 -i 2 -s 4000 -a "gcc_atlas gcc_openblas intel_mkl"

You may be able to pull something from that for what you're trying to do.
Anyway, since I had it handy, I thought I'd pass it along.

--
Justin Krometis
Computational Scientist
Advanced Research Computing


------------=_1437675211-2919-7
Content-Type: application/octet-stream; name="run_mm.sh"
Content-Disposition: inline; filename="run_mm.sh"
Content-Transfer-Encoding: base64
RT-Attachment: 8605/127481/80665

IyEvYmluL2Jhc2gKCiNEZWZhdWx0IHBhcmFtZXRlcnMKYXJjaGxpc3Q9Imlu
dGVsX21rbCBnY2NfYXRsYXMgZ2NjX29wZW5ibGFzIiAgI0xpc3Qgb2YgYXJj
aGl0ZWN0dXJlcyAoY29tcGlsZXJfYmxhcykKI250aHJlYWRzPTE2ICAgICAg
ICAgICAgICAgICAgICAjTnVtYmVyIG9mIHRocmVhZHMgdG8gdXNlCm5pdGVy
PTMgICAgICAgICAgICAgICAgICAgICAgICAjTnVtYmVyIG9mIHRpbWVzIHRv
IGRvIGVhY2ggbXVsdGlwbGljYXRpb24KbW1zaXplcz0iMTAyNCAyMDQ4IDQw
OTYgODE5MiIgICNNYXRyaXggc2l6ZXMgdG8gdXNlCgp1c2FnZT0iUnVuIERH
RU1NIGZvciBtdWx0aXBsZSBjb21waWxlci9ibGFzIGFuZCBwcm9ibGVtIHNp
emVzCgogIC10LCAtLXRocmVhZHMgICAgICAgc2V0IG51bWJlciBvZiB0aHJl
YWRzCiAgLWksIC0taXRlcmF0aW9ucyAgICBzZXQgbnVtYmVyIG9mIGl0ZXJh
dGlvbnMKICAtYSwgLS1hcmNoICAgICAgICAgIGxpc3Qgb2YgY29tcGlsZXJf
YmxhcyBjb21iaW5hdGlvbnMKICAtcywgLS1zaXplICAgICAgICAgIGxpc3Qg
b2YgbWF0cml4IHNpemVzIHRvIHVzZQogIC1oLCAtLWhlbHAgICAgICAgICAg
cHJpbnQgdXNhZ2UiCgojcGFyc2Ugb3B0aW9ucwpPUFRTPWBnZXRvcHQgLW8g
dDppOmE6czpoIC0tbG9uZyB0aHJlYWRzOixpdGVyYXRpb25zOixhcmNoOixz
aXplOixoZWxwIC0tICIkQCJgCmlmIFsgJD8gIT0gMCBdCnRoZW4KICAgIGV4
aXQgMQpmaQpldmFsIHNldCAtLSAiJE9QVFMiCgojaXRlcmF0ZSB0aHJvdWdo
IG9wdGlvbnMKd2hpbGUgdHJ1ZTsgZG8KICBjYXNlICIkMSIgaW4KICAgIC10
fC0tdGhyZWFkcyAgKSBudGhyZWFkcz0kMjsgc2hpZnQgMjs7CiAgICAtaXwt
LWl0ZXJhdGlvbnMpIG5pdGVyPSQyOyBzaGlmdCAyOzsKICAgIC1hfC0tYXJj
aCkgYXJjaGxpc3Q9JDI7IHNoaWZ0IDI7OwogICAgLXN8LS1zaXplKSBtbXNp
emVzPSQyOyBzaGlmdCAyOzsKCiAgICAtaHwtLWhlbHAgKSBlY2hvICIkdXNh
Z2UiOyBleGl0IDs7CgogICAgLS0pIHNoaWZ0OyBicmVhazs7CiAgICAqKSBl
Y2hvICJFcnJvcjogVW5yZWNvZ25pemVkIG9wdGlvbjogJDEiIDsgZXhpdCAx
IDs7CiAgZXNhYwpkb25lCgplY2hvICJSdW5uaW5nIGZvciB0aGUgZm9sbG93
aW5nIGNvbXBpbGVyL2JsYXMgY29tYmluYXRpb25zLi4uIgplY2hvICRhcmNo
bGlzdAplY2hvICJSdW5uaW5nIHByb2JsZW0gc2l6ZXMgJG1tc2l6ZXMgZWFj
aCAkbml0ZXIgdGltZShzKS4uLiIKCmlmIFtbICRudGhyZWFkcyA9PSAxIF1d
ICAgOyB0aGVuIAogIGVjaG8gIlJ1bm5pbmcgc2VyaWFsbHkuLi4iCiAgc2Vy
aWFsPTEKZWxzZSAKICBlY2hvICJSdW5uaW5nIHdpdGggdGhyZWFkZWQgYmxh
cyAoJG50aHJlYWRzIHRocmVhZHMpLi4uIgpmaQoKCiMjQnVpbGQgYW5kIFJ1
bgoKZm9yIGFyY2ggaW4gJGFyY2hsaXN0OyBkbwoKICAjTG9hZCB0aGUgcmln
aHQgY29tcGlsZXIgbW9kdWxlCiAgbW9kdWxlIHB1cmdlCiAgaWYgW1sgJGFy
Y2ggPT0gaW50ZWwqIF1dOyB0aGVuIAogICAgbW9kdWxlIGxvYWQgaW50ZWwK
ICAgIGV4cG9ydCBDWFg9aWNwYwogIGZpCiAgaWYgW1sgJGFyY2ggPT0gZ2Nj
KiBdXSAgOyB0aGVuIAogICAgbW9kdWxlIGxvYWQgZ2NjCiAgICBleHBvcnQg
Q1hYPWcrKwogIGZpCiAgCiAgI0xvYWQgdGhlIHJpZ2h0IEJMQVMsIHNldCBi
dWlsZCBmbGFncywgYW5kIG51bWJlciBvZiB0aHJlYWRzCiAgaWYgW1sgJGFy
Y2ggPT0gKm1rbCogXV0gICAgIDsgdGhlbiAKICAgIG1vZHVsZSBsb2FkIG1r
bAogICAgI2V4cG9ydCBDWFhMSUJTPSItTCR7TUtMUk9PVH0vbGliL2ludGVs
NjQgLWxta2xfaW50ZWxfbHA2NCAtbG1rbF9jb3JlIC1sbWtsX2ludGVsX3Ro
cmVhZCAtbHB0aHJlYWQgLWxtIgogICAgZXhwb3J0IENYWExJQlM9LW1rbAog
ICAgZXhwb3J0IE1LTF9OVU1fVEhSRUFEUz0kbnRocmVhZHMKICBmaQogIGlm
IFtbICRhcmNoID09ICphdGxhcyogXV0gICA7IHRoZW4gCiAgICBtb2R1bGUg
bG9hZCBhdGxhcwogICAgaWYgW1sgLXogJHNlcmlhbCBdXSAgIDsgdGhlbgog
ICAgICAjVGhyZWFkZWQKICAgICAgZXhwb3J0IENYWExJQlM9Ii1MXCQoQVRM
QVNfTElCKSAtbGxhcGFjayAtbHB0Zjc3YmxhcyAtbHRhdGxhcyAtbGdmb3J0
cmFuIgogICAgZWxzZQogICAgICAjVW50aHJlYWRlZAogICAgICBleHBvcnQg
Q1hYTElCUz0iLUxcJChBVExBU19MSUIpIC1sbGFwYWNrIC1sZjc3YmxhcyAt
bGF0bGFzIC1sZ2ZvcnRyYW4iCiAgICBmaQogIGZpCiAgaWYgW1sgJGFyY2gg
PT0gKm9wZW5ibGFzKiBdXTsgdGhlbiAKICAgIG1vZHVsZSBsb2FkIG9wZW5i
bGFzCiAgICBleHBvcnQgT1BFTkJMQVNfTlVNX1RIUkVBRFM9JG50aHJlYWRz
CiAgICBleHBvcnQgQ1hYTElCUz0iLUxcJChPUEVOQkxBU19MSUIpIC1sb3Bl
bmJsYXMiCiAgZmkKICBtb2R1bGUgbGlzdCAKCiAgI0J1aWxkCiAgZWNobyAi
QnVpbGRpbmcgZm9yICRhcmNoLi4uIgogIG1ha2UgY2xlYW4KICBtYWtlCiAg
ZWNobyAiQnVpbGQgZGVwZW5kZW5jaWVzIGFyZToiCiAgbGRkIG1tCgogICNS
dW4KICBlY2hvICJSdW5uaW5nIGZvciAkYXJjaC4uLiIKICBmb3IgbiBpbiAk
bW1zaXplczsgZG8KICAgIG91dHB1dD0kKCBmb3IgaXQgaW4gYHNlcSAxICRu
aXRlcmA7IGRvIC4vbW0gJG47IGRvbmUgKSAjcnVuIG5pdGVyIHRpbWVzIGFu
ZCBjYXB0dXJlIHRoZSByZXN1bHRzIGluIGEgdmFyaWFibGUKICAgIGVjaG8g
IiRvdXRwdXQiIAoKICAgICNjYWxjdWxhdGUgYW5kIHByaW50IGdmbG9wcwog
ICAgZ2Zsb3BzPSQoIGVjaG8gIiRvdXRwdXQiIHwgZ3JlcCAiXlRpbWUgZm9y
IiB8IGF3ayAtdiBuPSRuICd7Z2Zsb3BzKz0yKigobi8xMDAwKV4zKS8kNTsg
aXRlcisrfSBFTkQge3ByaW50IGdmbG9wcy9pdGVyfScgKQogICAgZWNobyAi
QXZlcmFnZSBHRkxPUFMvc2VjIGZvciAkYXJjaCBhbmQgcHJvYmxlbSBzaXpl
ICRuOiAkZ2Zsb3BzIgogIGRvbmUKCiAgZWNobyAiRmluaXNoZWQgd2l0aCAk
YXJjaC4iCmRvbmUgI2VuZCBhcmNoaXRlY3R1cmUgbG9vcAo=

------------=_1437675211-2919-7--
