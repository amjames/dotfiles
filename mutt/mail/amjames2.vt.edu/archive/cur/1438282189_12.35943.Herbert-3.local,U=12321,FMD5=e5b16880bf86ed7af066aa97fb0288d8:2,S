Delivered-To: amjames2@vt.edu
Received: by 10.140.25.151 with SMTP id 23csp1224943qgt;
        Sun, 26 Jul 2015 19:27:27 -0700 (PDT)
X-Received: by 10.140.42.98 with SMTP id b89mr37570241qga.78.1437964047081;
        Sun, 26 Jul 2015 19:27:27 -0700 (PDT)
Return-Path: <crawdad@vt.edu>
Received: from mr2.cc.vt.edu (mr2.cc.ipv6.vt.edu. [2001:468:c80:2105:0:212:7ed0:359e])
        by mx.google.com with ESMTPS id 68si19351590qgf.38.2015.07.26.19.27.26
        for <amjames2@vt.edu>
        (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sun, 26 Jul 2015 19:27:27 -0700 (PDT)
Received-SPF: softfail (google.com: domain of transitioning crawdad@vt.edu does not designate 209.85.213.170 as permitted sender) client-ip=209.85.213.170;
Authentication-Results: mx.google.com;
       spf=softfail (google.com: domain of transitioning crawdad@vt.edu does not designate 209.85.213.170 as permitted sender) smtp.mail=crawdad@vt.edu
Received: from mail-ig0-f170.google.com (mail-ig0-f170.google.com [209.85.213.170])
	by mr2.cc.vt.edu (8.14.4/8.14.4) with ESMTP id t6R2RKui021940
	for <amjames2@vt.edu>; Sun, 26 Jul 2015 22:27:25 -0400
Received: by igbpg9 with SMTP id pg9so59381073igb.0
        for <amjames2@vt.edu>; Sun, 26 Jul 2015 19:27:20 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:cc:content-type;
        bh=TV31uqJiSwWLfcOwSeIocgpyNq2Ce7ku/z1sk92cPlM=;
        b=bPT+Hm8d12JDCCD6EunngRg2+TJ3m2wFwBN/if4hPQK7Vc2y0mgfjvORWfEuJp8rm7
         ZPakLP7Kjc4QA0N3ColCd7ZQ8X/6LRqfhaxF9LMEAq/5I2QiE1B4qbdtDgZstqiZBCT5
         XHGGiXUG1/PKdWPNG3S6BVFjhgsIwunSyZbF8giq4d2Osc4Uxs731SQ9CRpf9KdN6L2c
         yiymP/szdOEMOu+JKANAQ5UTPR7VhpeUEwxcK3CehXY1RbP8npQq6tdbbbB9MCiW6ILs
         BBRGrKe4UUDg3oV9PLfdwy+V4CZCJW7rTznGMAkKYdWZjsz8PHi0c6y7Mj7rOTf6kSNu
         r0TQ==
X-Gm-Message-State: ALoCoQmqtZL8QZahnFJWGfdv8C4TzBnl5M1j/Ka3QcoO4vUwu8bFM87SV1cVJ2wXHDoM3L96mlbLFWsHSsLJreIKxCrMb/SrtyNTLHnKEIJk4K8AvtsQjG6p5fYhAYrNlsiKUMby+1HgyUxPLqZcEV8IVdRutfKJMw==
X-Received: by 10.107.37.142 with SMTP id l136mr43378727iol.126.1437964040501;
        Sun, 26 Jul 2015 19:27:20 -0700 (PDT)
MIME-Version: 1.0
X-Received: by 10.107.37.142 with SMTP id l136mr43378710iol.126.1437964040309;
 Sun, 26 Jul 2015 19:27:20 -0700 (PDT)
Received: by 10.107.55.87 with HTTP; Sun, 26 Jul 2015 19:27:20 -0700 (PDT)
In-Reply-To: <8FFD5FB5-5C60-46E7-9CE2-1548A06A9789@gmail.com>
References: <CAH0V_1Zbej=6ZAM3N_LJfr_cB047y3k=+QLuK8mxM=+rCiPAdw@mail.gmail.com>
	<22527015-70FA-4E7E-94C5-7FB6A5AD6F7E@gmail.com>
	<CAH0V_1bP3uy64m1rLZWKec8=k+5sD-yS8MyPpP7nw0PtL_2DuA@mail.gmail.com>
	<6A1F4E6D-CA9D-4F2B-8C3C-F76C4738D18C@gmail.com>
	<CAH0V_1bUvzC38iGRGeFJsh2=XEUzSPya5Nxb3DuK7XgiXKsD5Q@mail.gmail.com>
	<6CC01FBA-6330-40AA-A551-F20D687A2FA0@gmail.com>
	<CAH0V_1agfSjFK5gzUr=Uo7eW6ZCYZ=H4=UF3GhPLcdJ7QCf-Qg@mail.gmail.com>
	<CAH0V_1YzGBYzOjdKDczJD3W2zTavpb4rC3Q_m6CpbaG=5a1U7Q@mail.gmail.com>
	<8FFD5FB5-5C60-46E7-9CE2-1548A06A9789@gmail.com>
Date: Sun, 26 Jul 2015 22:27:20 -0400
Message-ID: <CAH0V_1Y_4qRgyAUwqnVvRX+=EPwNUAzR4Zy4vW7WbmFV6_xN8w@mail.gmail.com>
Subject: Re: Insane segfault
From: "T. Daniel Crawford" <crawdad@vt.edu>
To: Andrew Simmonett <andy.simmonett@gmail.com>
Cc: Justin Turney <justin.turney@gmail.com>,
        David Sherrill <sherrill@gatech.edu>,
        Lori Burns <lori.burns@gmail.com>,
        Roberto Di Remigio <roberto.diremigio@gmail.com>,
        Ashutosh Kumar <akumar1@vt.edu>, Andrew James <amjames2@vt.edu>
Content-Type: multipart/alternative; boundary=001a1140269ad2aab4051bd217fa
X-Spam-Status: No, score=-0.7 required=5.0 tests=HTML_MESSAGE,
	RCVD_IN_DNSWL_LOW autolearn=disabled version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mr2.cc.vt.edu
X-Gm-Spam: 0
X-Gm-Phishy: 0
X-Gm-Spam: 0
X-Gm-Phishy: 0

--001a1140269ad2aab4051bd217fa
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

I just found exactly the same thing, Andy, as the namespace issue occurred
to me right after hitting send.  I wrapped my class in the name of my
plugin (which I don't normally do, as I tend to follow the PSI4 library
namespace conventions), and now the execution is clean.

I *knew* as soon as I sent this out to everyone we'd see the problem
quickly. :)

-TDC

--
Prof. T. Daniel Crawford
crawdad@vt.edu

On Sun, Jul 26, 2015 at 10:23 PM, Andrew Simmonett <andy.simmonett@gmail.co=
m
> wrote:

> Daniel,
>
> This extra information is very useful.  I think it=E2=80=99s probably a c=
lash of
> file names; there appears to be a hamiltonian.h file in libfock as well a=
s
> chemps2.  I bet the problem is related to the wrong version of the header
> file being included.
>
> Andy.
>
>
> On Jul 26, 2015, at 8:18 PM, T. Daniel Crawford <crawdad@vt.edu> wrote:
>
> Hi, all,
>
> Andy and I have been having a discussion about segfaults I've encountered
> when trying to execute PSI4 plugins on my Intel-based clusters.  We've se=
en
> some strange behavior with objects from essentially empty classes causing
> the code to crash when the plugin exits. (You can see our back and forth
> below, if you're interested.  These problems do not occur on my Macs.)
>
> Well, I'm expanding the conversation to include all of you because my
> observations have gotten weirder. On two different computing systems usin=
g
> Intel compilers (14.0.3 and 15.3), I get a segfault for a blank plugin
> (called, appropriately, "junk") for which I add a trivial Hamiltonian
> class, defined as follows:
>
> hamiltonian.h:
>
> namespace psi {
> class Hamiltonian {
> public:
>   Hamiltonian();
>   ~Hamiltonian();
> };
> }
>
> hamiltonian.cc:
>
> #include "hamiltonian.h"
> namespace psi {
> Hamiltonian::Hamiltonian() { }
> Hamiltonian::~Hamiltonian() { }
> }
>
> In junk.cc, the *only* changes from the default created by "psi4
> --new-plugin" are:
>
> #include "hamiltonian.h"
>
> INIT_PLUGIN
>
> and
>
>     Hamiltonian A;
>
>     return Success;
>
> HOWEVER, if I instead do EXACTLY the same thing, but every instance of th=
e
> word "Hamiltonian" is replaced by "myclass" and I create myclass.h and
> myclass.cc defined similarly as above, psi4 does not segfault.  This is
> bizarre.
>
> Another observation: if I get rid of hamiltonian.cc and define the
> constructor and destructor inside hamiltonian.h as:
>
> namespace psi {
> class Hamiltonian {
> public:
>   Hamiltonian() {};
>   ~Hamiltonian() {};
> };
> }
>
> the code runs without complaint.  I cannot yet explain this behavior.
> Maybe you can see a straightforward answer.
>
> Best regards,
>
> -Daniel
> --
> Prof. T. Daniel Crawford
> crawdad@vt.edu
>
> On Sat, Jul 25, 2015 at 9:10 PM, T. Daniel Crawford <crawdad@vt.edu>
> wrote:
>
>> OK, so if I understand the website to which you referred (which I love,
>> by the way),
>>
>> Hamiltonian H();
>>
>> means H is a function that returns a Hamiltonian object, so the reason
>> the code didn't produce a segfault is because I declared a function I ne=
ver
>> called, so a definition was unnecessary.  Would you agree?
>>
>> And to follow up, indeed the call
>>
>> Hamiltonian *H =3D new Hamiltonian();
>>
>> succeeds, but adding
>>
>> delete H;
>>
>> causes the segfault.  Fascinating.  So the problem is not with
>> boost::shared_ptr.  FYI, ripping everything out of the plugin structure =
and
>> simply building it into a main() runs just fine.
>>
>> -Daniel
>>
>> --
>> Prof. T. Daniel Crawford
>> crawdad@vt.edu
>>
>> On Sat, Jul 25, 2015 at 2:29 AM, Andrew Simmonett <
>> andy.simmonett@gmail.com> wrote:
>>
>>> Daniel,
>>>
>>> H(); succeeds because it=E2=80=99s not actually initializing anything, =
per point
>>> b) of this:
>>>
>>> http://herbsutter.com/2013/05/09/gotw-1-solution/
>>>
>>> The only reason I remember that is because it cost me a few days of my
>>> life when debugging a problem a few years ago.  It=E2=80=99s obviously =
not the
>>> destruction of the shared ptr if =E2=80=9CHamiltonian H;=E2=80=9D cause=
s issues.  The next
>>> question is whether the creation or the destruction of the object is to
>>> blame.  What about creating an object
>>>
>>> Hamiltonian *H =3D new Hamiltonian();
>>>
>>> but not destroying it?  I suspect that will run, because I think tearin=
g
>>> down the object is causing issues.  If it does run successfully, does a=
dding
>>>
>>> delete H;
>>>
>>> break the code?  I=E2=80=99m really baffled by this bug, and am interes=
ted to
>>> find the cause.
>>>
>>> Andy.
>>>
>>> On Jul 24, 2015, at 10:04 PM, T. Daniel Crawford <crawdad@vt.edu> wrote=
:
>>>
>>> Interesting.  This succeeds:
>>>
>>>   Hamiltonian H();
>>>
>>> But this fails:
>>>
>>>   boost::shared_ptr<Hamiltonian> H(new Hamiltonian());
>>>
>>> As does this:
>>>
>>>   Hamiltonian H;
>>>
>>> I do not yet know why.
>>>
>>> -TDC
>>>
>>> --
>>> Prof. T. Daniel Crawford
>>> crawdad@vt.edu
>>>
>>> On Fri, Jul 24, 2015 at 4:47 PM, Andrew Simmonett <
>>> andy.simmonett@gmail.com> wrote:
>>>
>>>> Daniel,
>>>>
>>>> Sorry, I was on a conference call with Jay Ponder.  What happens if yo=
u
>>>> remove the shared pointer, and instantiate the object without using =
=E2=80=9Cnew=E2=80=9D?
>>>>
>>>>
>>>> On Jul 24, 2015, at 1:39 PM, T. Daniel Crawford <crawdad@vt.edu> wrote=
:
>>>>
>>>> I still get a segfault on exit.  I should also note that, when I add
>>>> other calls instead of the Hamiltonian instantiation, I see no problem=
s,
>>>> e.g.:
>>>>
>>>>   boost::shared_ptr<Wavefunction> ref =3D
>>>> Process::environment.wavefunction();
>>>>
>>>> What could be special about that Hamiltonian class?
>>>>
>>>> --
>>>> Prof. T. Daniel Crawford
>>>> crawdad@vt.edu
>>>>
>>>> On Fri, Jul 24, 2015 at 3:35 PM, Andrew Simmonett <
>>>> andy.simmonett@gmail.com> wrote:
>>>>
>>>>> Daniel,
>>>>>
>>>>> I wonder if the cleanup of the plugin happens too late.  That is,
>>>>> perhaps the boost::shared_ptr reaches a count of zero after the retur=
n
>>>>> statement but, for some strange reason, the plugin code has already b=
een
>>>>> unloaded. Then it=E2=80=99d be trying to call d=E2=80=99tor code that=
 is no longer around.
>>>>> The way to test this is to leave the code that creates the instance i=
ntact
>>>>> but call H.reset() immediately before the return statement.  I seriou=
sly
>>>>> doubt that=E2=80=99s the cause, but it=E2=80=99s worth eliminating.
>>>>>
>>>>> Andy.
>>>>>
>>>>>
>>>>> On Jul 24, 2015, at 1:28 PM, T. Daniel Crawford <crawdad@vt.edu>
>>>>> wrote:
>>>>>
>>>>> I'm going insane.  I have a useful plugin that I'd like to execute on
>>>>> a better computing cluster (CentOS, Intel/15.3, MKL/11.2.3, etc.), bu=
t I
>>>>> get a segfault at the plugin's exit that I can't track.  Interactive
>>>>> debuggers aren't functioning on the system for some reason, so I star=
ted
>>>>> ripping out pieces of the code to narrow the problem down.  I determi=
ned
>>>>> that the error occurs because of a constructor I've created, but even=
 when
>>>>> I rip the class down to absolutely nothing, the segfault remains.
>>>>> Seriously, here's the code in its entirety:
>>>>>
>>>>> ugamp.cc:
>>>>>
>>>>> #include "hamiltonian.h"
>>>>>
>>>>> #include <libplugin/plugin.h>
>>>>> #include <psi4-dec.h>
>>>>> #include <liboptions/liboptions.h>
>>>>>
>>>>> INIT_PLUGIN
>>>>>
>>>>> using namespace boost;
>>>>>
>>>>> namespace psi { namespace ugamp {
>>>>>
>>>>> extern "C"
>>>>> int read_options(std::string name, Options& options)
>>>>> {
>>>>>   if(name =3D=3D "UGAMP" || options.read_globals()) {
>>>>>     options.add_int("PRINT", 1);
>>>>>     options.add_str("REFERENCE", "RHF");
>>>>>     options.add_str("WFN", "CCSD", "MP2 MP3 MP4 CCSD CCSD_T");
>>>>>   }
>>>>>
>>>>>   return true;
>>>>> }
>>>>>
>>>>> extern "C"
>>>>> PsiReturnType ugamp(Options& options)
>>>>> {
>>>>>   boost::shared_ptr<Hamiltonian> H(new Hamiltonian());
>>>>>
>>>>>   return Success;
>>>>> }
>>>>>
>>>>> }} // End namespaces
>>>>>
>>>>>
>>>>> hamiltonian.h:
>>>>>
>>>>> #ifndef HAMILTONIAN_H
>>>>> #define HAMILTONIAN_H
>>>>>
>>>>> namespace psi {
>>>>>
>>>>> class Hamiltonian {
>>>>> public:
>>>>>   Hamiltonian();
>>>>>   ~Hamiltonian();
>>>>>
>>>>> }; // Hamiltonian
>>>>>
>>>>> } // psi
>>>>>
>>>>> #endif // HAMILTONIAN_H
>>>>>
>>>>> hamiltonian.cc:
>>>>>
>>>>> #include "hamiltonian.h"
>>>>>
>>>>> namespace psi {
>>>>>
>>>>> Hamiltonian::Hamiltonian()
>>>>> {
>>>>> }
>>>>>
>>>>> Hamiltonian::~Hamiltonian()
>>>>> {
>>>>> }
>>>>>
>>>>> } // namespace psi
>>>>>
>>>>> If I comment out the "boost::shared_ptr<Hamiltonian> H(new
>>>>> Hamiltonian());" line, psi4 runs with no problems, but if I include i=
t, I
>>>>> get a segfault.  There's NOTHING there?  What the hell could be going=
 on?
>>>>>
>>>>> -TDC
>>>>>
>>>>> --
>>>>> Prof. T. Daniel Crawford
>>>>> crawdad@vt.edu
>>>>>
>>>>>
>>>>>
>>>>
>>>>
>>>
>>>
>>
>
>

--001a1140269ad2aab4051bd217fa
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I just found exactly the same thing, Andy, as the namespac=
e issue occurred to me right after hitting send.=C2=A0 I wrapped my class i=
n the name of my plugin (which I don&#39;t normally do, as I tend to follow=
 the PSI4 library namespace conventions), and now the execution is clean. =
=C2=A0<div><br></div><div>I *knew* as soon as I sent this out to everyone w=
e&#39;d see the problem quickly. :)</div><div><br></div><div>-TDC</div></di=
v><div class=3D"gmail_extra"><br clear=3D"all"><div><div class=3D"gmail_sig=
nature"><div dir=3D"ltr">--<div>Prof. T. Daniel Crawford</div><div><a href=
=3D"mailto:crawdad@vt.edu" target=3D"_blank">crawdad@vt.edu</a></div></div>=
</div></div>
<br><div class=3D"gmail_quote">On Sun, Jul 26, 2015 at 10:23 PM, Andrew Sim=
monett <span dir=3D"ltr">&lt;<a href=3D"mailto:andy.simmonett@gmail.com" ta=
rget=3D"_blank">andy.simmonett@gmail.com</a>&gt;</span> wrote:<br><blockquo=
te class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc so=
lid;padding-left:1ex"><div style=3D"word-wrap:break-word">Daniel,<div><br><=
/div><div>This extra information is very useful.=C2=A0 I think it=E2=80=99s=
 probably a clash of file names; there appears to be a hamiltonian.h file i=
n libfock as well as chemps2.=C2=A0 I bet the problem is related to the wro=
ng version of the header file being included.</div><div><br></div><div>Andy=
.</div><div><br></div><div><br><div><blockquote type=3D"cite"><span class=
=3D""><div>On Jul 26, 2015, at 8:18 PM, T. Daniel Crawford &lt;<a href=3D"m=
ailto:crawdad@vt.edu" target=3D"_blank">crawdad@vt.edu</a>&gt; wrote:</div>=
<br></span><div><div dir=3D"ltr"><span class=3D""><div>Hi, all,</div><div><=
br></div><div>Andy and I have been having a discussion about segfaults I&#3=
9;ve encountered when trying to execute PSI4 plugins on my Intel-based clus=
ters.=C2=A0 We&#39;ve seen some strange behavior with objects from essentia=
lly empty classes causing the code to crash when the plugin exits. (You can=
 see our back and forth below, if you&#39;re interested.=C2=A0 These proble=
ms do not occur on my Macs.) =C2=A0</div><div><br></div><div>Well, I&#39;m =
expanding the conversation to include all of you because my observations ha=
ve gotten weirder. On two different computing systems using Intel compilers=
 (14.0.3 and 15.3), I get a segfault for a blank plugin (called, appropriat=
ely, &quot;junk&quot;) for which I add a trivial Hamiltonian class, defined=
 as follows:</div><div><br></div><div>hamiltonian.h:</div><div><br></div><d=
iv><div style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,=
239,239);background-color:rgb(0,0,0)">namespace psi {</div><div style=3D"ma=
rgin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,239);background=
-color:rgb(0,0,0)">class Hamiltonian {</div><div style=3D"margin:0px;font-s=
ize:11px;font-family:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,=
0)">public:</div><div style=3D"margin:0px;font-size:11px;font-family:Menlo;=
color:rgb(239,239,239);background-color:rgb(0,0,0)">=C2=A0 Hamiltonian();</=
div><div style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239=
,239,239);background-color:rgb(0,0,0)">=C2=A0 ~Hamiltonian();</div><div sty=
le=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,239);ba=
ckground-color:rgb(0,0,0)">};</div><div style=3D"margin:0px;font-size:11px;=
font-family:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,0)">}</di=
v></div><div><br></div></span><div><a href=3D"http://hamiltonian.cc" target=
=3D"_blank">hamiltonian.cc</a>:</div><span class=3D""><div><br></div><div><=
div style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,=
239);background-color:rgb(0,0,0)">#include &quot;hamiltonian.h&quot;</div><=
div style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,=
239);background-color:rgb(0,0,0)">namespace psi {</div><div style=3D"margin=
:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,239);background-col=
or:rgb(0,0,0)">Hamiltonian::Hamiltonian() { }</div><div style=3D"margin:0px=
;font-size:11px;font-family:Menlo;color:rgb(239,239,239);background-color:r=
gb(0,0,0)">Hamiltonian::~Hamiltonian() { }</div><div style=3D"margin:0px;fo=
nt-size:11px;font-family:Menlo;color:rgb(239,239,239);background-color:rgb(=
0,0,0)">}</div></div><div><br></div></span><div>In <a href=3D"http://junk.c=
c" target=3D"_blank">junk.cc</a>, the *only* changes from the default creat=
ed by &quot;psi4 --new-plugin&quot; are:</div><span class=3D""><div><br></d=
iv><div><div style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb=
(239,239,239);background-color:rgb(0,0,0)">#include &quot;hamiltonian.h&quo=
t;</div><div style=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb=
(239,239,239);background-color:rgb(0,0,0);min-height:13px"><br></div><div s=
tyle=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,239);=
background-color:rgb(0,0,0)">INIT_PLUGIN</div></div><div><br></div><div>and=
</div><div><br></div><div><div style=3D"margin:0px;font-size:11px;font-fami=
ly:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,0)">=C2=A0 =C2=A0=
=C2=A0Hamiltonian A;</div><div style=3D"margin:0px;font-size:11px;font-fami=
ly:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,0);min-height:13px=
"><br></div><div style=3D"margin:0px;font-size:11px;font-family:Menlo;color=
:rgb(239,239,239);background-color:rgb(0,0,0)">=C2=A0 =C2=A0 return Success=
;</div></div><div class=3D"gmail_extra"><br></div></span><div class=3D"gmai=
l_extra">HOWEVER, if I instead do EXACTLY the same thing, but every instanc=
e of the word &quot;Hamiltonian&quot; is replaced by &quot;myclass&quot; an=
d I create myclass.h and <a href=3D"http://myclass.cc" target=3D"_blank">my=
class.cc</a> defined similarly as above, psi4 does not segfault.=C2=A0 This=
 is bizarre.</div><div class=3D"gmail_extra"><br></div><div class=3D"gmail_=
extra">Another observation: if I get rid of <a href=3D"http://hamiltonian.c=
c" target=3D"_blank">hamiltonian.cc</a> and define the constructor and dest=
ructor inside hamiltonian.h as:</div><div><div class=3D"h5"><div class=3D"g=
mail_extra"><br></div><div class=3D"gmail_extra"><div style=3D"margin:0px;f=
ont-size:11px;font-family:Menlo;color:rgb(239,239,239);background-color:rgb=
(0,0,0)">namespace psi {</div><div style=3D"margin:0px;font-size:11px;font-=
family:Menlo;color:rgb(239,239,239);background-color:rgb(0,0,0)">class Hami=
ltonian {</div><div style=3D"margin:0px;font-size:11px;font-family:Menlo;co=
lor:rgb(239,239,239);background-color:rgb(0,0,0)">public:</div><div style=
=3D"margin:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,239);back=
ground-color:rgb(0,0,0)">=C2=A0 Hamiltonian() {};</div><div style=3D"margin=
:0px;font-size:11px;font-family:Menlo;color:rgb(239,239,239);background-col=
or:rgb(0,0,0)">=C2=A0 ~Hamiltonian() {};</div><div style=3D"margin:0px;font=
-size:11px;font-family:Menlo;color:rgb(239,239,239);background-color:rgb(0,=
0,0)">};</div><div style=3D"margin:0px;font-size:11px;font-family:Menlo;col=
or:rgb(239,239,239);background-color:rgb(0,0,0)">}</div><div><br></div><div=
>the code runs without complaint.=C2=A0 I cannot yet explain this behavior.=
=C2=A0 Maybe you can see a straightforward answer.</div><div><br></div><div=
>Best regards,</div><div><br></div><div>-Daniel</div></div><div class=3D"gm=
ail_extra"><div><div><div dir=3D"ltr">--<div>Prof. T. Daniel Crawford</div>=
<div><a href=3D"mailto:crawdad@vt.edu" target=3D"_blank">crawdad@vt.edu</a>=
</div></div></div></div>
<br><div class=3D"gmail_quote">On Sat, Jul 25, 2015 at 9:10 PM, T. Daniel C=
rawford <span dir=3D"ltr">&lt;<a href=3D"mailto:crawdad@vt.edu" target=3D"_=
blank">crawdad@vt.edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
x"><div dir=3D"ltr">OK, so if I understand the website to which you referre=
d (which I love, by the way),<div><br></div><div>Hamiltonian H();</div><div=
><br></div><div>means H is a function that returns a Hamiltonian object, so=
 the reason the code didn&#39;t produce a segfault is because I declared a =
function I never called, so a definition was unnecessary.=C2=A0 Would you a=
gree?</div><div><br></div><div>And to follow up, indeed the call</div><span=
><div><br></div><div>Hamiltonian *H =3D new Hamiltonian();</div><div><br></=
div></span><div>succeeds, but adding</div><div><br></div><div>delete H;</di=
v><div><br></div><div>causes the segfault.=C2=A0 Fascinating.=C2=A0 So the =
problem is not with boost::shared_ptr.=C2=A0 FYI, ripping everything out of=
 the plugin structure and simply building it into a main() runs just fine.<=
/div><span><font color=3D"#888888"><div><br></div><div>-Daniel</div></font>=
</span></div><div class=3D"gmail_extra"><span><br clear=3D"all"><div><div><=
div dir=3D"ltr">--<div>Prof. T. Daniel Crawford</div><div><a href=3D"mailto=
:crawdad@vt.edu" target=3D"_blank">crawdad@vt.edu</a></div></div></div></di=
v>
<br></span><div><div><div class=3D"gmail_quote">On Sat, Jul 25, 2015 at 2:2=
9 AM, Andrew Simmonett <span dir=3D"ltr">&lt;<a href=3D"mailto:andy.simmone=
tt@gmail.com" target=3D"_blank">andy.simmonett@gmail.com</a>&gt;</span> wro=
te:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-=
left:1px #ccc solid;padding-left:1ex"><div style=3D"word-wrap:break-word">D=
aniel,<div><br></div><div>H(); succeeds because it=E2=80=99s not actually i=
nitializing anything, per point b) of this:</div><div><br></div><div><a hre=
f=3D"http://herbsutter.com/2013/05/09/gotw-1-solution/" target=3D"_blank">h=
ttp://herbsutter.com/2013/05/09/gotw-1-solution/</a></div><div><br></div><d=
iv>The only reason I remember that is because it cost me a few days of my l=
ife when debugging a problem a few years ago.=C2=A0 It=E2=80=99s obviously =
not the destruction of the shared ptr if =E2=80=9CHamiltonian H;=E2=80=9D c=
auses issues.=C2=A0 The next question is whether the creation or the destru=
ction of the object is to blame.=C2=A0 What about creating an object</div><=
div><br></div><div><span style=3D"white-space:pre-wrap">	</span>Hamiltonian=
 *H =3D new Hamiltonian();</div><div><br></div><div>but not destroying it?=
=C2=A0 I suspect that will run, because I think tearing down the object is =
causing issues.=C2=A0 If it does run successfully, does adding</div><div><b=
r></div><div><span style=3D"white-space:pre-wrap">	</span>delete H;</div><d=
iv><br></div><div>break the code?=C2=A0 I=E2=80=99m really baffled by this =
bug, and am interested to find the cause.</div><div><br></div><div>Andy.</d=
iv><div><div><div><br><div><blockquote type=3D"cite"><div>On Jul 24, 2015, =
at 10:04 PM, T. Daniel Crawford &lt;<a href=3D"mailto:crawdad@vt.edu" targe=
t=3D"_blank">crawdad@vt.edu</a>&gt; wrote:</div><br><div><div dir=3D"ltr">I=
nteresting.=C2=A0 This succeeds:<div><br></div><div><div>=C2=A0 Hamiltonian=
 H();</div></div><div><br></div><div>But this fails:</div><div><br></div><d=
iv><div>=C2=A0 boost::shared_ptr&lt;Hamiltonian&gt; H(new Hamiltonian());</=
div></div><div><br></div><div><div><div>As does this:<br></div></div></div>=
<div><br></div><div><div>=C2=A0 Hamiltonian H;</div></div><div><br></div><d=
iv>I do not yet know why.</div><div><div><br></div></div><div>-TDC</div></d=
iv><div class=3D"gmail_extra"><br clear=3D"all"><div><div><div dir=3D"ltr">=
--<div>Prof. T. Daniel Crawford</div><div><a href=3D"mailto:crawdad@vt.edu"=
 target=3D"_blank">crawdad@vt.edu</a></div></div></div></div>
<br><div class=3D"gmail_quote">On Fri, Jul 24, 2015 at 4:47 PM, Andrew Simm=
onett <span dir=3D"ltr">&lt;<a href=3D"mailto:andy.simmonett@gmail.com" tar=
get=3D"_blank">andy.simmonett@gmail.com</a>&gt;</span> wrote:<br><blockquot=
e class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc sol=
id;padding-left:1ex"><div style=3D"word-wrap:break-word">Daniel,<div><br></=
div><div>Sorry, I was on a conference call with Jay Ponder.=C2=A0 What happ=
ens if you remove the shared pointer, and instantiate the object without us=
ing =E2=80=9Cnew=E2=80=9D?</div><div><br></div><div><br><div><blockquote ty=
pe=3D"cite"><span><div>On Jul 24, 2015, at 1:39 PM, T. Daniel Crawford &lt;=
<a href=3D"mailto:crawdad@vt.edu" target=3D"_blank">crawdad@vt.edu</a>&gt; =
wrote:</div><br></span><div><span><div dir=3D"ltr">I still get a segfault o=
n exit.=C2=A0 I should also note that, when I add other calls instead of th=
e Hamiltonian instantiation, I see no problems, e.g.:<div><br></div><div><d=
iv>=C2=A0 boost::shared_ptr&lt;Wavefunction&gt; ref =3D Process::environmen=
t.wavefunction();</div></div><div><br></div><div>What could be special abou=
t that Hamiltonian class?</div></div></span><div class=3D"gmail_extra"><spa=
n><br clear=3D"all"><div><div><div dir=3D"ltr">--<div>Prof. T. Daniel Crawf=
ord</div><div><a href=3D"mailto:crawdad@vt.edu" target=3D"_blank">crawdad@v=
t.edu</a></div></div></div></div>
<br></span><div class=3D"gmail_quote"><span>On Fri, Jul 24, 2015 at 3:35 PM=
, Andrew Simmonett <span dir=3D"ltr">&lt;<a href=3D"mailto:andy.simmonett@g=
mail.com" target=3D"_blank">andy.simmonett@gmail.com</a>&gt;</span> wrote:<=
br></span><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bord=
er-left:1px #ccc solid;padding-left:1ex"><div style=3D"word-wrap:break-word=
"><span>Daniel,<div><br></div><div>I wonder if the cleanup of the plugin ha=
ppens too late.=C2=A0 That is, perhaps the boost::shared_ptr reaches a coun=
t of zero after the return statement but, for some strange reason, the plug=
in code has already been unloaded. Then it=E2=80=99d be trying to call d=E2=
=80=99tor code that is no longer around.=C2=A0 The way to test this is to l=
eave the code that creates the instance intact but call H.reset() immediate=
ly before the return statement.=C2=A0 I seriously doubt that=E2=80=99s the =
cause, but it=E2=80=99s worth eliminating.</div><div><br></div><div>Andy.</=
div><div><br></div></span><div><br><div><blockquote type=3D"cite"><span><di=
v>On Jul 24, 2015, at 1:28 PM, T. Daniel Crawford &lt;<a href=3D"mailto:cra=
wdad@vt.edu" target=3D"_blank">crawdad@vt.edu</a>&gt; wrote:</div><br></spa=
n><div><div dir=3D"ltr"><span><span>I&#39;m going insane.=C2=A0 I have a us=
eful plugin that I&#39;d like to execute on a better computing cluster (Cen=
tOS, Intel/15.3, MKL/11.2.3, etc.), but I get a segfault at the plugin&#39;=
s exit that I can&#39;t track.=C2=A0 Interactive debuggers aren&#39;t funct=
ioning on the system for some reason, so I started ripping out pieces of th=
e code to narrow the problem down.=C2=A0 I determined that the error occurs=
 because of a constructor I&#39;ve created, but even when I rip the class d=
own to absolutely nothing, the segfault remains.=C2=A0 Seriously, here&#39;=
s the code in its entirety:<div><br></div></span></span><div><a href=3D"htt=
p://ugamp.cc/" target=3D"_blank">ugamp.cc</a>:</div><div><br></div><div><di=
v><div><div><div><div>#include &quot;hamiltonian.h&quot;</div><div><br></di=
v><div>#include &lt;libplugin/plugin.h&gt;</div><div>#include &lt;psi4-dec.=
h&gt;</div><div>#include &lt;liboptions/liboptions.h&gt;</div><div><br></di=
v><div>INIT_PLUGIN</div><div><br></div><div>using namespace boost;</div><di=
v><br></div><div>namespace psi { namespace ugamp {</div><div><br></div><div=
>extern &quot;C&quot;</div><div>int read_options(std::string name, Options&=
amp; options)</div><div>{</div><div>=C2=A0 if(name =3D=3D &quot;UGAMP&quot;=
 || options.read_globals()) {</div><div>=C2=A0 =C2=A0 options.add_int(&quot=
;PRINT&quot;, 1);</div><div>=C2=A0 =C2=A0 options.add_str(&quot;REFERENCE&q=
uot;, &quot;RHF&quot;);</div><div>=C2=A0 =C2=A0 options.add_str(&quot;WFN&q=
uot;, &quot;CCSD&quot;, &quot;MP2 MP3 MP4 CCSD CCSD_T&quot;);</div><div>=C2=
=A0 }</div><div><br></div><div>=C2=A0 return true;</div><div>}</div><div><b=
r></div><div>extern &quot;C&quot;</div><div>PsiReturnType ugamp(Options&amp=
; options)</div><div>{</div><div>=C2=A0 boost::shared_ptr&lt;Hamiltonian&gt=
; H(new Hamiltonian());</div><div><br></div><div>=C2=A0 return Success;</di=
v><div>}</div><div><br></div><div>}} // End namespaces</div><div><br></div>=
<div><br></div><div>hamiltonian.h:</div><div><br></div><div><div>#ifndef HA=
MILTONIAN_H</div><div>#define HAMILTONIAN_H</div><div><br></div><div>namesp=
ace psi {</div><div><br></div><div>class Hamiltonian {</div><div>public:</d=
iv><div>=C2=A0 Hamiltonian();</div><div>=C2=A0 ~Hamiltonian();</div><div><b=
r></div><div>}; // Hamiltonian</div><div><br></div><div>} // psi</div><div>=
<br></div><div>#endif // HAMILTONIAN_H</div></div><div><br></div></div></di=
v></div></div><div><a href=3D"http://hamiltonian.cc/" target=3D"_blank">ham=
iltonian.cc</a>:</div><span><span><div><br></div><div><div>#include &quot;h=
amiltonian.h&quot;</div><div><br></div><div>namespace psi {</div><div><br><=
/div><div>Hamiltonian::Hamiltonian()</div><div>{</div><div>}</div><div><br>=
</div><div>Hamiltonian::~Hamiltonian()</div><div>{</div><div>}</div><div><b=
r></div><div>} // namespace psi</div></div><div><br></div><div>If I comment=
 out the &quot;boost::shared_ptr&lt;Hamiltonian&gt; H(new Hamiltonian());&q=
uot; line, psi4 runs with no problems, but if I include it, I get a segfaul=
t.=C2=A0 There&#39;s NOTHING there?=C2=A0 What the hell could be going on?<=
/div><div><br></div><div>-TDC</div><div><br></div><div><div><div><div dir=
=3D"ltr">--<div>Prof. T. Daniel Crawford</div><div><a href=3D"mailto:crawda=
d@vt.edu" target=3D"_blank">crawdad@vt.edu</a></div></div></div></div>
</div></span></span></div></div>
</div></blockquote></div><br></div></div></blockquote></div><br></div>
</div></blockquote></div><br></div></div></blockquote></div><br></div>
</div></blockquote></div><br></div></div></div></div></blockquote></div><br=
></div></div></div>
</blockquote></div><br></div></div></div></div>
</div></blockquote></div><br></div></div></blockquote></div><br></div>

--001a1140269ad2aab4051bd217fa--
