Delivered-To: amjames2@vt.edu
Received: by 10.140.25.151 with SMTP id 23csp2098982qgt;
        Mon, 3 Aug 2015 13:58:40 -0700 (PDT)
X-Received: by 10.140.99.49 with SMTP id p46mr103258qge.46.1438635520817;
        Mon, 03 Aug 2015 13:58:40 -0700 (PDT)
Return-Path: <noreply@github.com>
Received: from mr4.cc.vt.edu (mr4.cc.ipv6.vt.edu. [2001:468:c80:2105:0:232:8670:19fe])
        by mx.google.com with ESMTPS id g11si4957211qhc.0.2015.08.03.13.58.40
        for <amjames2@vt.edu>
        (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 03 Aug 2015 13:58:40 -0700 (PDT)
Received-SPF: pass (google.com: domain of noreply@github.com designates 192.30.252.194 as permitted sender) client-ip=192.30.252.194;
Authentication-Results: mx.google.com;
       spf=pass (google.com: domain of noreply@github.com designates 192.30.252.194 as permitted sender) smtp.mail=noreply@github.com;
       dkim=pass (test mode) header.i=@github.com
Received: from github-smtp2b-ext-cp1-prd.iad.github.net (github-smtp2-ext3.iad.github.net [192.30.252.194])
	by mr4.cc.vt.edu (8.14.4/8.14.4) with ESMTP id t73KwWE9001849
	for <amjames2@vt.edu>; Mon, 3 Aug 2015 16:58:37 -0400
Date: Mon, 03 Aug 2015 13:58:30 -0700
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=github.com;
	s=pf2014; t=1438635510;
	bh=+a3xyu7mRJxxpN0W2dTZ644A0ptiCEhrNUETWY5Nnic=;
	h=From:Reply-To:To:Subject:List-ID:List-Archive:List-Post:
	 List-Unsubscribe:From;
	b=Wzqzl9B2/pa1WkQYc6h3Svy7fqmVkwznJZHTxpp39HSvS58YUFiHN1fRIWzzDCUkd
	 8NZdl8NT//MZ59n3ko5T9+EWjJkxjYnZhnj2KDQmmUvfOGBBdTnsLp7byLn7S1Ep0m
	 tZXB7uWRuKG+h8m01UTYG2K68oeOoVMsXUqtcxZQ=
From: Kevin Hannon <notifications@github.com>
Reply-To: psi4/psi4public <reply+0089f642806f7e4c124fb7b33205e1cdd7a627a5d5c26a3c92cf0000000111d797f692a169ce05e423f4@reply.github.com>
To: psi4/psi4public <psi4public@noreply.github.com>
Message-ID: <psi4/psi4public/issues/157@github.com>
Subject: [psi4public] Libthce seg faults on generation of DF integrals for
 porphyrin radical calculation (#157)
Mime-Version: 1.0
Content-Type: multipart/alternative;
 boundary="--==_mimepart_55bfd5f66905_1b423f934368f2c0140249";
 charset=UTF-8
Content-Transfer-Encoding: 7bit
Precedence: list
X-GitHub-Sender: kannon92
X-GitHub-Recipient: amjames
List-ID: psi4/psi4public <psi4public.psi4.github.com>
List-Archive: https://github.com/psi4/psi4public
List-Post: <mailto:reply+0089f642806f7e4c124fb7b33205e1cdd7a627a5d5c26a3c92cf0000000111d797f692a169ce05e423f4@reply.github.com>
List-Unsubscribe: <mailto:unsub+0089f642806f7e4c124fb7b33205e1cdd7a627a5d5c26a3c92cf0000000111d797f692a169ce05e423f4@reply.github.com>,
 <https://github.com/notifications/unsubscribe/AIn2QmEEIhk16Esalow9EBSEjKwnYAAAks5oj812gaJpZM4Fk3wA>
X-Auto-Response-Suppress: All
X-GitHub-Recipient-Address: amjames2@vt.edu
X-Spam-Status: No, score=-5.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
	DKIM_VALID_AU,HTML_MESSAGE,RCVD_IN_DNSWL_HI autolearn=disabled version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mr4.cc.vt.edu
X-Gm-Spam: 0
X-Gm-Phishy: 0
X-Gm-Spam: 0
X-Gm-Phishy: 0


----==_mimepart_55bfd5f66905_1b423f934368f2c0140249
Content-Type: text/plain;
 charset=UTF-8
Content-Transfer-Encoding: 7bit

I am trying to run a porphyrin radical calculation with 1700 basis functions.  I call dferi->compute() in my plugin and it seems that during the generation of the MO DF integrals, there is some sort of segmentation fault.  I generate all of the MO integrals using density fitting.   

I have a minimal plugin available to test this input.   

The input is given below: 
```
memory 100 gb
molecule {
0 1
 C                     0.68541667     0.00000000     4.17724008
 C                    -0.68541667     0.00000000     4.17724008
 C                    -1.07715949     0.00000000     2.85236290
 C                     1.07715949     0.00000000     2.85236290
 N                     0.00000000     0.00000000     2.03366350
 C                     2.35903958     0.00000000     2.45806358
 C                     2.81721573     0.00000000     1.05258796
 N                     2.05486054     0.00000000     0.01405448
 C                     2.88740001     0.00000000    -1.13057937
 C                     4.23537365     0.00000000     0.67022148
 C                     4.27600326     0.00000000    -0.70111647
 C                     2.48623109     0.00000000    -2.40919453
 C                     1.07657777     0.00000000    -2.84029441
 N                     0.00000000     0.00000000    -2.02366514
 C                    -0.68542522     0.00000000    -4.16299454
 C                     0.68542522     0.00000000    -4.16299454
 C                    -2.88740001     0.00000000    -1.13057937
 N                    -2.05486054     0.00000000     0.01405448
 C                    -2.81721573     0.00000000     1.05258796
 C                    -4.23537365     0.00000000     0.67022148
 C                    -4.27600326     0.00000000    -0.70111647
 C                    -2.35903958     0.00000000     2.45806358
 C                    -2.48623109     0.00000000    -2.40919453
 C                    -1.07657777     0.00000000    -2.84029441
 H                     1.32705735     0.00000000     5.04949752
 H                    -1.32705735     0.00000000     5.04949752
 H                     3.13133350     0.00000000     3.22359766
 H                     5.09358852     0.00000000     1.32905912
 H                     5.16675318     0.00000000    -1.31569036
 H                     3.24762417     0.00000000    -3.18492574
 H                    -1.32960963     0.00000000    -5.03269392
 H                     1.32960963     0.00000000    -5.03269392
 H                    -5.09358852     0.00000000     1.32905912
 H                    -5.16675318     0.00000000    -1.31569036
 H                    -3.13133350     0.00000000     3.22359766
 H                    -3.24762417     0.00000000    -3.18492574
units angstrom
}

set {
  reference rhf
  scf_type  DF
  guess     SAD
  d_convergence 4
  e_convergence 4
  basis cc-pvqz
  df_basis_mp2 cc-pvqz-ri
}

set dfmp2 {
  print 1
}

energy('dfmp2')

dfmp2.exampleFN()
```

My plugin is given below:

```
/*
 *@BEGIN LICENSE
 *
 * dfmp2 by Psi4 Developer, a plugin to:
 *
 * PSI4: an ab initio quantum chemistry software package
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *@END LICENSE
 */

#include <libplugin/plugin.h>
#include <psi4-dec.h>
#include <libparallel/parallel.h>
#include <liboptions/liboptions.h>
#include <libmints/wavefunction.h>
#include <libmints/basisset.h>
#include <libmints/matrix.h>
#include <libmints/vector.h>
#include <libpsio/psio.hpp>
#include <libthce/lreri.h>
#include <libthce/thcew.h>
#include <libthce/thce.h>

INIT_PLUGIN

using namespace boost;

namespace psi{ namespace dfmp2 {

extern "C"
int read_options(std::string name, Options& options)
{
    if (name == "DFMP2"|| options.read_globals()) {
        /*- The amount of information printed to the output file -*/
        options.add_int("PRINT", 1);
    }

    return true;
}

extern "C"
PsiReturnType dfmp2(Options& options)
{
    int print = options.get_int("PRINT");
    boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();
    boost::shared_ptr<BasisSet> primary = wfn->basisset();

    boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_orbital(primary->molecule(), "DF_BASIS_MP2", options.get_str("DF_BASIS_MP2"));

    boost::shared_ptr<Matrix> Caocc = wfn->Ca_subset("AO", "ACTIVE_OCC");
    boost::shared_ptr<Matrix> Cavir = wfn->Ca_subset("AO", "ACTIVE_VIR");

    boost::shared_ptr<Vector> eps_aocc = wfn->epsilon_a_subset("AO", "ACTIVE_OCC");
    boost::shared_ptr<Vector> eps_avir = wfn->epsilon_a_subset("AO", "ACTIVE_VIR");

    int no = eps_aocc->dimpi()[0];
    int nv = eps_avir->dimpi()[0];
    int nn = primary->nbf();
    int nQ = auxiliary->nbf();

    long int memory = Process::environment.get_memory();
    int nthreads = 1;

    primary->molecule()->print();
    primary->print();
    auxiliary->print();

    // => Setup DF Integrals <= //

    boost::shared_ptr<DFERI> df = DFERI::build(primary,auxiliary,options, wfn);
    df->add_pair_space("B", "ALL", "ALL");

    df->set_memory(memory / 8L);
    df->print_header();
    df->compute();
    outfile->Printf("\n Done with everything!");

    /* Your code goes here */

    return Success;
}

}} // End namespaces
```

---
Reply to this email directly or view it on GitHub:
https://github.com/psi4/psi4public/issues/157
----==_mimepart_55bfd5f66905_1b423f934368f2c0140249
Content-Type: text/html;
 charset=UTF-8
Content-Transfer-Encoding: 7bit

<p>I am trying to run a porphyrin radical calculation with 1700 basis functions.  I call dferi-&gt;compute() in my plugin and it seems that during the generation of the MO DF integrals, there is some sort of segmentation fault.  I generate all of the MO integrals using density fitting.   </p>

<p>I have a minimal plugin available to test this input.   </p>

<p>The input is given below: </p>

<pre><code>memory 100 gb
molecule {
0 1
 C                     0.68541667     0.00000000     4.17724008
 C                    -0.68541667     0.00000000     4.17724008
 C                    -1.07715949     0.00000000     2.85236290
 C                     1.07715949     0.00000000     2.85236290
 N                     0.00000000     0.00000000     2.03366350
 C                     2.35903958     0.00000000     2.45806358
 C                     2.81721573     0.00000000     1.05258796
 N                     2.05486054     0.00000000     0.01405448
 C                     2.88740001     0.00000000    -1.13057937
 C                     4.23537365     0.00000000     0.67022148
 C                     4.27600326     0.00000000    -0.70111647
 C                     2.48623109     0.00000000    -2.40919453
 C                     1.07657777     0.00000000    -2.84029441
 N                     0.00000000     0.00000000    -2.02366514
 C                    -0.68542522     0.00000000    -4.16299454
 C                     0.68542522     0.00000000    -4.16299454
 C                    -2.88740001     0.00000000    -1.13057937
 N                    -2.05486054     0.00000000     0.01405448
 C                    -2.81721573     0.00000000     1.05258796
 C                    -4.23537365     0.00000000     0.67022148
 C                    -4.27600326     0.00000000    -0.70111647
 C                    -2.35903958     0.00000000     2.45806358
 C                    -2.48623109     0.00000000    -2.40919453
 C                    -1.07657777     0.00000000    -2.84029441
 H                     1.32705735     0.00000000     5.04949752
 H                    -1.32705735     0.00000000     5.04949752
 H                     3.13133350     0.00000000     3.22359766
 H                     5.09358852     0.00000000     1.32905912
 H                     5.16675318     0.00000000    -1.31569036
 H                     3.24762417     0.00000000    -3.18492574
 H                    -1.32960963     0.00000000    -5.03269392
 H                     1.32960963     0.00000000    -5.03269392
 H                    -5.09358852     0.00000000     1.32905912
 H                    -5.16675318     0.00000000    -1.31569036
 H                    -3.13133350     0.00000000     3.22359766
 H                    -3.24762417     0.00000000    -3.18492574
units angstrom
}

set {
  reference rhf
  scf_type  DF
  guess     SAD
  d_convergence 4
  e_convergence 4
  basis cc-pvqz
  df_basis_mp2 cc-pvqz-ri
}

set dfmp2 {
  print 1
}

energy('dfmp2')

dfmp2.exampleFN()
</code></pre>

<p>My plugin is given below:</p>

<pre><code>/*
 *@BEGIN LICENSE
 *
 * dfmp2 by Psi4 Developer, a plugin to:
 *
 * PSI4: an ab initio quantum chemistry software package
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 *@END LICENSE
 */

#include &lt;libplugin/plugin.h&gt;
#include &lt;psi4-dec.h&gt;
#include &lt;libparallel/parallel.h&gt;
#include &lt;liboptions/liboptions.h&gt;
#include &lt;libmints/wavefunction.h&gt;
#include &lt;libmints/basisset.h&gt;
#include &lt;libmints/matrix.h&gt;
#include &lt;libmints/vector.h&gt;
#include &lt;libpsio/psio.hpp&gt;
#include &lt;libthce/lreri.h&gt;
#include &lt;libthce/thcew.h&gt;
#include &lt;libthce/thce.h&gt;

INIT_PLUGIN

using namespace boost;

namespace psi{ namespace dfmp2 {

extern "C"
int read_options(std::string name, Options&amp; options)
{
    if (name == "DFMP2"|| options.read_globals()) {
        /*- The amount of information printed to the output file -*/
        options.add_int("PRINT", 1);
    }

    return true;
}

extern "C"
PsiReturnType dfmp2(Options&amp; options)
{
    int print = options.get_int("PRINT");
    boost::shared_ptr&lt;Wavefunction&gt; wfn = Process::environment.wavefunction();
    boost::shared_ptr&lt;BasisSet&gt; primary = wfn-&gt;basisset();

    boost::shared_ptr&lt;BasisSet&gt; auxiliary = BasisSet::pyconstruct_orbital(primary-&gt;molecule(), "DF_BASIS_MP2", options.get_str("DF_BASIS_MP2"));

    boost::shared_ptr&lt;Matrix&gt; Caocc = wfn-&gt;Ca_subset("AO", "ACTIVE_OCC");
    boost::shared_ptr&lt;Matrix&gt; Cavir = wfn-&gt;Ca_subset("AO", "ACTIVE_VIR");

    boost::shared_ptr&lt;Vector&gt; eps_aocc = wfn-&gt;epsilon_a_subset("AO", "ACTIVE_OCC");
    boost::shared_ptr&lt;Vector&gt; eps_avir = wfn-&gt;epsilon_a_subset("AO", "ACTIVE_VIR");

    int no = eps_aocc-&gt;dimpi()[0];
    int nv = eps_avir-&gt;dimpi()[0];
    int nn = primary-&gt;nbf();
    int nQ = auxiliary-&gt;nbf();

    long int memory = Process::environment.get_memory();
    int nthreads = 1;

    primary-&gt;molecule()-&gt;print();
    primary-&gt;print();
    auxiliary-&gt;print();

    // =&gt; Setup DF Integrals &lt;= //

    boost::shared_ptr&lt;DFERI&gt; df = DFERI::build(primary,auxiliary,options, wfn);
    df-&gt;add_pair_space("B", "ALL", "ALL");

    df-&gt;set_memory(memory / 8L);
    df-&gt;print_header();
    df-&gt;compute();
    outfile-&gt;Printf("\n Done with everything!");

    /* Your code goes here */

    return Success;
}

}} // End namespaces
</code></pre>

<p style="font-size:small;-webkit-text-size-adjust:none;color:#666;">&mdash;<br>Reply to this email directly or <a href="https://github.com/psi4/psi4public/issues/157">view it on GitHub</a>.<img alt="" height="1" src="https://github.com/notifications/beacon/AIn2QkSejb_VnCVHefwkwYGomWTaCKERks5oj812gaJpZM4Fk3wA.gif" width="1" /></p>
<div itemscope itemtype="http://schema.org/EmailMessage">
  <div itemprop="action" itemscope itemtype="http://schema.org/ViewAction">
    <link itemprop="url" href="https://github.com/psi4/psi4public/issues/157"></link>
    <meta itemprop="name" content="View Issue"></meta>
  </div>
  <meta itemprop="description" content="View this Issue on GitHub"></meta>
</div>

----==_mimepart_55bfd5f66905_1b423f934368f2c0140249--
